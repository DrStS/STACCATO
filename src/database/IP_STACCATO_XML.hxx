// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef IP_STACCATO_XML_HXX
#define IP_STACCATO_XML_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
class NODESET;
class TRANSLATETO;
class LOAD;
class REAL;
class IMAGINARY;
class STACCATO_XML;
class REFERENCENODESET;
class REFERENCENODE;
class COUPLINGNODESET;
class PARTS;
class ANALYSIS;
class PART;
class FREQUENCY;
class FILEEXPORT;
class BCCASE;
class LOADCASES;
class ROMDATA;
class FILEIMPORT;
class MATERIALS;
class SECTIONS;
class SETS;
class LOADS;
class BC_DEF;
class EXPORT;
class BC;
class LOADCASE;
class EXP_POINTS;
class KRYLOV_ORDER;
class INPUTS;
class OUTPUTS;
class IMPORT;
class MATERIAL;
class SECTION;
class ELEMENTSET;
class DISPLACEMENT;
class INPUT_LOADCASE;
class OUTPUTS_HISTORY;
class UMA;
class NODE;
class ELEMENT;

#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

class NODESET: public ::xml_schema::type
{
  public:
  // LIST
  //
  typedef ::xml_schema::string LIST_type;
  typedef ::xsd::cxx::tree::optional< LIST_type > LIST_optional;
  typedef ::xsd::cxx::tree::traits< LIST_type, char > LIST_traits;

  const LIST_optional&
  LIST () const;

  LIST_optional&
  LIST ();

  void
  LIST (const LIST_type& x);

  void
  LIST (const LIST_optional& x);

  void
  LIST (::std::auto_ptr< LIST_type > p);

  // Name
  //
  typedef ::xml_schema::string Name_type;
  typedef ::xsd::cxx::tree::optional< Name_type > Name_optional;
  typedef ::xsd::cxx::tree::traits< Name_type, char > Name_traits;

  const Name_optional&
  Name () const;

  Name_optional&
  Name ();

  void
  Name (const Name_type& x);

  void
  Name (const Name_optional& x);

  void
  Name (::std::auto_ptr< Name_type > p);

  // Instance
  //
  typedef ::xml_schema::string Instance_type;
  typedef ::xsd::cxx::tree::optional< Instance_type > Instance_optional;
  typedef ::xsd::cxx::tree::traits< Instance_type, char > Instance_traits;

  const Instance_optional&
  Instance () const;

  Instance_optional&
  Instance ();

  void
  Instance (const Instance_type& x);

  void
  Instance (const Instance_optional& x);

  void
  Instance (::std::auto_ptr< Instance_type > p);

  // Constructors.
  //
  NODESET ();

  NODESET (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = xml_schema::flags::dont_validate,
           ::xml_schema::container* c = 0);

  NODESET (const NODESET& x,
           ::xml_schema::flags f = xml_schema::flags::dont_validate,
           ::xml_schema::container* c = 0);

  virtual NODESET*
  _clone (::xml_schema::flags f = xml_schema::flags::dont_validate,
          ::xml_schema::container* c = 0) const;

  NODESET&
  operator= (const NODESET& x);

  virtual 
  ~NODESET ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  LIST_optional LIST_;
  Name_optional Name_;
  Instance_optional Instance_;
};

class TRANSLATETO: public ::xml_schema::type
{
  public:
  // Source
  //
  typedef ::xml_schema::string Source_type;
  typedef ::xsd::cxx::tree::optional< Source_type > Source_optional;
  typedef ::xsd::cxx::tree::traits< Source_type, char > Source_traits;

  const Source_optional&
  Source () const;

  Source_optional&
  Source ();

  void
  Source (const Source_type& x);

  void
  Source (const Source_optional& x);

  void
  Source (::std::auto_ptr< Source_type > p);

  // Target
  //
  typedef ::xml_schema::string Target_type;
  typedef ::xsd::cxx::tree::optional< Target_type > Target_optional;
  typedef ::xsd::cxx::tree::traits< Target_type, char > Target_traits;

  const Target_optional&
  Target () const;

  Target_optional&
  Target ();

  void
  Target (const Target_type& x);

  void
  Target (const Target_optional& x);

  void
  Target (::std::auto_ptr< Target_type > p);

  // Constructors.
  //
  TRANSLATETO ();

  TRANSLATETO (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = xml_schema::flags::dont_validate,
               ::xml_schema::container* c = 0);

  TRANSLATETO (const TRANSLATETO& x,
               ::xml_schema::flags f = xml_schema::flags::dont_validate,
               ::xml_schema::container* c = 0);

  virtual TRANSLATETO*
  _clone (::xml_schema::flags f = xml_schema::flags::dont_validate,
          ::xml_schema::container* c = 0) const;

  TRANSLATETO&
  operator= (const TRANSLATETO& x);

  virtual 
  ~TRANSLATETO ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  Source_optional Source_;
  Target_optional Target_;
};

class LOAD: public ::xml_schema::type
{
  public:
  // NODESET
  //
  typedef ::NODESET NODESET_type;
  typedef ::xsd::cxx::tree::sequence< NODESET_type > NODESET_sequence;
  typedef NODESET_sequence::iterator NODESET_iterator;
  typedef NODESET_sequence::const_iterator NODESET_const_iterator;
  typedef ::xsd::cxx::tree::traits< NODESET_type, char > NODESET_traits;

  const NODESET_sequence&
  NODESET () const;

  NODESET_sequence&
  NODESET ();

  void
  NODESET (const NODESET_sequence& s);

  // REFERENCENODESET
  //
  typedef ::REFERENCENODESET REFERENCENODESET_type;
  typedef ::xsd::cxx::tree::sequence< REFERENCENODESET_type > REFERENCENODESET_sequence;
  typedef REFERENCENODESET_sequence::iterator REFERENCENODESET_iterator;
  typedef REFERENCENODESET_sequence::const_iterator REFERENCENODESET_const_iterator;
  typedef ::xsd::cxx::tree::traits< REFERENCENODESET_type, char > REFERENCENODESET_traits;

  const REFERENCENODESET_sequence&
  REFERENCENODESET () const;

  REFERENCENODESET_sequence&
  REFERENCENODESET ();

  void
  REFERENCENODESET (const REFERENCENODESET_sequence& s);

  // REFERENCENODE
  //
  typedef ::REFERENCENODE REFERENCENODE_type;
  typedef ::xsd::cxx::tree::sequence< REFERENCENODE_type > REFERENCENODE_sequence;
  typedef REFERENCENODE_sequence::iterator REFERENCENODE_iterator;
  typedef REFERENCENODE_sequence::const_iterator REFERENCENODE_const_iterator;
  typedef ::xsd::cxx::tree::traits< REFERENCENODE_type, char > REFERENCENODE_traits;

  const REFERENCENODE_sequence&
  REFERENCENODE () const;

  REFERENCENODE_sequence&
  REFERENCENODE ();

  void
  REFERENCENODE (const REFERENCENODE_sequence& s);

  // COUPLINGNODESET
  //
  typedef ::COUPLINGNODESET COUPLINGNODESET_type;
  typedef ::xsd::cxx::tree::sequence< COUPLINGNODESET_type > COUPLINGNODESET_sequence;
  typedef COUPLINGNODESET_sequence::iterator COUPLINGNODESET_iterator;
  typedef COUPLINGNODESET_sequence::const_iterator COUPLINGNODESET_const_iterator;
  typedef ::xsd::cxx::tree::traits< COUPLINGNODESET_type, char > COUPLINGNODESET_traits;

  const COUPLINGNODESET_sequence&
  COUPLINGNODESET () const;

  COUPLINGNODESET_sequence&
  COUPLINGNODESET ();

  void
  COUPLINGNODESET (const COUPLINGNODESET_sequence& s);

  // REAL
  //
  typedef ::REAL REAL_type;
  typedef ::xsd::cxx::tree::sequence< REAL_type > REAL_sequence;
  typedef REAL_sequence::iterator REAL_iterator;
  typedef REAL_sequence::const_iterator REAL_const_iterator;
  typedef ::xsd::cxx::tree::traits< REAL_type, char > REAL_traits;

  const REAL_sequence&
  REAL () const;

  REAL_sequence&
  REAL ();

  void
  REAL (const REAL_sequence& s);

  // IMAGINARY
  //
  typedef ::IMAGINARY IMAGINARY_type;
  typedef ::xsd::cxx::tree::sequence< IMAGINARY_type > IMAGINARY_sequence;
  typedef IMAGINARY_sequence::iterator IMAGINARY_iterator;
  typedef IMAGINARY_sequence::const_iterator IMAGINARY_const_iterator;
  typedef ::xsd::cxx::tree::traits< IMAGINARY_type, char > IMAGINARY_traits;

  const IMAGINARY_sequence&
  IMAGINARY () const;

  IMAGINARY_sequence&
  IMAGINARY ();

  void
  IMAGINARY (const IMAGINARY_sequence& s);

  // Type
  //
  typedef ::xml_schema::string Type_type;
  typedef ::xsd::cxx::tree::optional< Type_type > Type_optional;
  typedef ::xsd::cxx::tree::traits< Type_type, char > Type_traits;

  const Type_optional&
  Type () const;

  Type_optional&
  Type ();

  void
  Type (const Type_type& x);

  void
  Type (const Type_optional& x);

  void
  Type (::std::auto_ptr< Type_type > p);

  // Name
  //
  typedef ::xml_schema::string Name_type;
  typedef ::xsd::cxx::tree::optional< Name_type > Name_optional;
  typedef ::xsd::cxx::tree::traits< Name_type, char > Name_traits;

  const Name_optional&
  Name () const;

  Name_optional&
  Name ();

  void
  Name (const Name_type& x);

  void
  Name (const Name_optional& x);

  void
  Name (::std::auto_ptr< Name_type > p);

  // Instance
  //
  typedef ::xml_schema::string Instance_type;
  typedef ::xsd::cxx::tree::optional< Instance_type > Instance_optional;
  typedef ::xsd::cxx::tree::traits< Instance_type, char > Instance_traits;

  const Instance_optional&
  Instance () const;

  Instance_optional&
  Instance ();

  void
  Instance (const Instance_type& x);

  void
  Instance (const Instance_optional& x);

  void
  Instance (::std::auto_ptr< Instance_type > p);

  // Constructors.
  //
  LOAD ();

  LOAD (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f = xml_schema::flags::dont_validate,
        ::xml_schema::container* c = 0);

  LOAD (const LOAD& x,
        ::xml_schema::flags f = xml_schema::flags::dont_validate,
        ::xml_schema::container* c = 0);

  virtual LOAD*
  _clone (::xml_schema::flags f = xml_schema::flags::dont_validate,
          ::xml_schema::container* c = 0) const;

  LOAD&
  operator= (const LOAD& x);

  virtual 
  ~LOAD ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  NODESET_sequence NODESET_;
  REFERENCENODESET_sequence REFERENCENODESET_;
  REFERENCENODE_sequence REFERENCENODE_;
  COUPLINGNODESET_sequence COUPLINGNODESET_;
  REAL_sequence REAL_;
  IMAGINARY_sequence IMAGINARY_;
  Type_optional Type_;
  Name_optional Name_;
  Instance_optional Instance_;
};

class REAL: public ::xml_schema::type
{
  public:
  // X
  //
  typedef ::xml_schema::string X_type;
  typedef ::xsd::cxx::tree::optional< X_type > X_optional;
  typedef ::xsd::cxx::tree::traits< X_type, char > X_traits;

  const X_optional&
  X () const;

  X_optional&
  X ();

  void
  X (const X_type& x);

  void
  X (const X_optional& x);

  void
  X (::std::auto_ptr< X_type > p);

  // Y
  //
  typedef ::xml_schema::string Y_type;
  typedef ::xsd::cxx::tree::optional< Y_type > Y_optional;
  typedef ::xsd::cxx::tree::traits< Y_type, char > Y_traits;

  const Y_optional&
  Y () const;

  Y_optional&
  Y ();

  void
  Y (const Y_type& x);

  void
  Y (const Y_optional& x);

  void
  Y (::std::auto_ptr< Y_type > p);

  // Z
  //
  typedef ::xml_schema::string Z_type;
  typedef ::xsd::cxx::tree::optional< Z_type > Z_optional;
  typedef ::xsd::cxx::tree::traits< Z_type, char > Z_traits;

  const Z_optional&
  Z () const;

  Z_optional&
  Z ();

  void
  Z (const Z_type& x);

  void
  Z (const Z_optional& x);

  void
  Z (::std::auto_ptr< Z_type > p);

  // Constructors.
  //
  REAL ();

  REAL (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f = xml_schema::flags::dont_validate,
        ::xml_schema::container* c = 0);

  REAL (const REAL& x,
        ::xml_schema::flags f = xml_schema::flags::dont_validate,
        ::xml_schema::container* c = 0);

  virtual REAL*
  _clone (::xml_schema::flags f = xml_schema::flags::dont_validate,
          ::xml_schema::container* c = 0) const;

  REAL&
  operator= (const REAL& x);

  virtual 
  ~REAL ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  X_optional X_;
  Y_optional Y_;
  Z_optional Z_;
};

class IMAGINARY: public ::xml_schema::type
{
  public:
  // X
  //
  typedef ::xml_schema::string X_type;
  typedef ::xsd::cxx::tree::optional< X_type > X_optional;
  typedef ::xsd::cxx::tree::traits< X_type, char > X_traits;

  const X_optional&
  X () const;

  X_optional&
  X ();

  void
  X (const X_type& x);

  void
  X (const X_optional& x);

  void
  X (::std::auto_ptr< X_type > p);

  // Y
  //
  typedef ::xml_schema::string Y_type;
  typedef ::xsd::cxx::tree::optional< Y_type > Y_optional;
  typedef ::xsd::cxx::tree::traits< Y_type, char > Y_traits;

  const Y_optional&
  Y () const;

  Y_optional&
  Y ();

  void
  Y (const Y_type& x);

  void
  Y (const Y_optional& x);

  void
  Y (::std::auto_ptr< Y_type > p);

  // Z
  //
  typedef ::xml_schema::string Z_type;
  typedef ::xsd::cxx::tree::optional< Z_type > Z_optional;
  typedef ::xsd::cxx::tree::traits< Z_type, char > Z_traits;

  const Z_optional&
  Z () const;

  Z_optional&
  Z ();

  void
  Z (const Z_type& x);

  void
  Z (const Z_optional& x);

  void
  Z (::std::auto_ptr< Z_type > p);

  // Constructors.
  //
  IMAGINARY ();

  IMAGINARY (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = xml_schema::flags::dont_validate,
             ::xml_schema::container* c = 0);

  IMAGINARY (const IMAGINARY& x,
             ::xml_schema::flags f = xml_schema::flags::dont_validate,
             ::xml_schema::container* c = 0);

  virtual IMAGINARY*
  _clone (::xml_schema::flags f = xml_schema::flags::dont_validate,
          ::xml_schema::container* c = 0) const;

  IMAGINARY&
  operator= (const IMAGINARY& x);

  virtual 
  ~IMAGINARY ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  X_optional X_;
  Y_optional Y_;
  Z_optional Z_;
};

class STACCATO_XML: public ::xml_schema::type
{
  public:
  // NODESET
  //
  typedef ::NODESET NODESET_type;
  typedef ::xsd::cxx::tree::sequence< NODESET_type > NODESET_sequence;
  typedef NODESET_sequence::iterator NODESET_iterator;
  typedef NODESET_sequence::const_iterator NODESET_const_iterator;
  typedef ::xsd::cxx::tree::traits< NODESET_type, char > NODESET_traits;

  const NODESET_sequence&
  NODESET () const;

  NODESET_sequence&
  NODESET ();

  void
  NODESET (const NODESET_sequence& s);

  // TRANSLATETO
  //
  typedef ::TRANSLATETO TRANSLATETO_type;
  typedef ::xsd::cxx::tree::sequence< TRANSLATETO_type > TRANSLATETO_sequence;
  typedef TRANSLATETO_sequence::iterator TRANSLATETO_iterator;
  typedef TRANSLATETO_sequence::const_iterator TRANSLATETO_const_iterator;
  typedef ::xsd::cxx::tree::traits< TRANSLATETO_type, char > TRANSLATETO_traits;

  const TRANSLATETO_sequence&
  TRANSLATETO () const;

  TRANSLATETO_sequence&
  TRANSLATETO ();

  void
  TRANSLATETO (const TRANSLATETO_sequence& s);

  // LOAD
  //
  typedef ::LOAD LOAD_type;
  typedef ::xsd::cxx::tree::sequence< LOAD_type > LOAD_sequence;
  typedef LOAD_sequence::iterator LOAD_iterator;
  typedef LOAD_sequence::const_iterator LOAD_const_iterator;
  typedef ::xsd::cxx::tree::traits< LOAD_type, char > LOAD_traits;

  const LOAD_sequence&
  LOAD () const;

  LOAD_sequence&
  LOAD ();

  void
  LOAD (const LOAD_sequence& s);

  // REAL
  //
  typedef ::REAL REAL_type;
  typedef ::xsd::cxx::tree::sequence< REAL_type > REAL_sequence;
  typedef REAL_sequence::iterator REAL_iterator;
  typedef REAL_sequence::const_iterator REAL_const_iterator;
  typedef ::xsd::cxx::tree::traits< REAL_type, char > REAL_traits;

  const REAL_sequence&
  REAL () const;

  REAL_sequence&
  REAL ();

  void
  REAL (const REAL_sequence& s);

  // IMAGINARY
  //
  typedef ::IMAGINARY IMAGINARY_type;
  typedef ::xsd::cxx::tree::sequence< IMAGINARY_type > IMAGINARY_sequence;
  typedef IMAGINARY_sequence::iterator IMAGINARY_iterator;
  typedef IMAGINARY_sequence::const_iterator IMAGINARY_const_iterator;
  typedef ::xsd::cxx::tree::traits< IMAGINARY_type, char > IMAGINARY_traits;

  const IMAGINARY_sequence&
  IMAGINARY () const;

  IMAGINARY_sequence&
  IMAGINARY ();

  void
  IMAGINARY (const IMAGINARY_sequence& s);

  // PARTS
  //
  typedef ::PARTS PARTS_type;
  typedef ::xsd::cxx::tree::sequence< PARTS_type > PARTS_sequence;
  typedef PARTS_sequence::iterator PARTS_iterator;
  typedef PARTS_sequence::const_iterator PARTS_const_iterator;
  typedef ::xsd::cxx::tree::traits< PARTS_type, char > PARTS_traits;

  const PARTS_sequence&
  PARTS () const;

  PARTS_sequence&
  PARTS ();

  void
  PARTS (const PARTS_sequence& s);

  // ANALYSIS
  //
  typedef ::ANALYSIS ANALYSIS_type;
  typedef ::xsd::cxx::tree::sequence< ANALYSIS_type > ANALYSIS_sequence;
  typedef ANALYSIS_sequence::iterator ANALYSIS_iterator;
  typedef ANALYSIS_sequence::const_iterator ANALYSIS_const_iterator;
  typedef ::xsd::cxx::tree::traits< ANALYSIS_type, char > ANALYSIS_traits;

  const ANALYSIS_sequence&
  ANALYSIS () const;

  ANALYSIS_sequence&
  ANALYSIS ();

  void
  ANALYSIS (const ANALYSIS_sequence& s);

  // Constructors.
  //
  STACCATO_XML ();

  STACCATO_XML (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = xml_schema::flags::dont_validate,
                ::xml_schema::container* c = 0);

  STACCATO_XML (const STACCATO_XML& x,
                ::xml_schema::flags f = xml_schema::flags::dont_validate,
                ::xml_schema::container* c = 0);

  virtual STACCATO_XML*
  _clone (::xml_schema::flags f = xml_schema::flags::dont_validate,
          ::xml_schema::container* c = 0) const;

  STACCATO_XML&
  operator= (const STACCATO_XML& x);

  virtual 
  ~STACCATO_XML ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  NODESET_sequence NODESET_;
  TRANSLATETO_sequence TRANSLATETO_;
  LOAD_sequence LOAD_;
  REAL_sequence REAL_;
  IMAGINARY_sequence IMAGINARY_;
  PARTS_sequence PARTS_;
  ANALYSIS_sequence ANALYSIS_;
};

class REFERENCENODESET: public ::xml_schema::type
{
  public:
  // Name
  //
  typedef ::xml_schema::string Name_type;
  typedef ::xsd::cxx::tree::optional< Name_type > Name_optional;
  typedef ::xsd::cxx::tree::traits< Name_type, char > Name_traits;

  const Name_optional&
  Name () const;

  Name_optional&
  Name ();

  void
  Name (const Name_type& x);

  void
  Name (const Name_optional& x);

  void
  Name (::std::auto_ptr< Name_type > p);

  // Constructors.
  //
  REFERENCENODESET ();

  REFERENCENODESET (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = xml_schema::flags::dont_validate,
                    ::xml_schema::container* c = 0);

  REFERENCENODESET (const REFERENCENODESET& x,
                    ::xml_schema::flags f = xml_schema::flags::dont_validate,
                    ::xml_schema::container* c = 0);

  virtual REFERENCENODESET*
  _clone (::xml_schema::flags f = xml_schema::flags::dont_validate,
          ::xml_schema::container* c = 0) const;

  REFERENCENODESET&
  operator= (const REFERENCENODESET& x);

  virtual 
  ~REFERENCENODESET ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  Name_optional Name_;
};

class REFERENCENODE: public ::xml_schema::type
{
  public:
  // X
  //
  typedef ::xml_schema::string X_type;
  typedef ::xsd::cxx::tree::optional< X_type > X_optional;
  typedef ::xsd::cxx::tree::traits< X_type, char > X_traits;

  const X_optional&
  X () const;

  X_optional&
  X ();

  void
  X (const X_type& x);

  void
  X (const X_optional& x);

  void
  X (::std::auto_ptr< X_type > p);

  // Y
  //
  typedef ::xml_schema::string Y_type;
  typedef ::xsd::cxx::tree::optional< Y_type > Y_optional;
  typedef ::xsd::cxx::tree::traits< Y_type, char > Y_traits;

  const Y_optional&
  Y () const;

  Y_optional&
  Y ();

  void
  Y (const Y_type& x);

  void
  Y (const Y_optional& x);

  void
  Y (::std::auto_ptr< Y_type > p);

  // Z
  //
  typedef ::xml_schema::string Z_type;
  typedef ::xsd::cxx::tree::optional< Z_type > Z_optional;
  typedef ::xsd::cxx::tree::traits< Z_type, char > Z_traits;

  const Z_optional&
  Z () const;

  Z_optional&
  Z ();

  void
  Z (const Z_type& x);

  void
  Z (const Z_optional& x);

  void
  Z (::std::auto_ptr< Z_type > p);

  // Constructors.
  //
  REFERENCENODE ();

  REFERENCENODE (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = xml_schema::flags::dont_validate,
                 ::xml_schema::container* c = 0);

  REFERENCENODE (const REFERENCENODE& x,
                 ::xml_schema::flags f = xml_schema::flags::dont_validate,
                 ::xml_schema::container* c = 0);

  virtual REFERENCENODE*
  _clone (::xml_schema::flags f = xml_schema::flags::dont_validate,
          ::xml_schema::container* c = 0) const;

  REFERENCENODE&
  operator= (const REFERENCENODE& x);

  virtual 
  ~REFERENCENODE ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  X_optional X_;
  Y_optional Y_;
  Z_optional Z_;
};

class COUPLINGNODESET: public ::xml_schema::type
{
  public:
  // Name
  //
  typedef ::xml_schema::string Name_type;
  typedef ::xsd::cxx::tree::optional< Name_type > Name_optional;
  typedef ::xsd::cxx::tree::traits< Name_type, char > Name_traits;

  const Name_optional&
  Name () const;

  Name_optional&
  Name ();

  void
  Name (const Name_type& x);

  void
  Name (const Name_optional& x);

  void
  Name (::std::auto_ptr< Name_type > p);

  // Constructors.
  //
  COUPLINGNODESET ();

  COUPLINGNODESET (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = xml_schema::flags::dont_validate,
                   ::xml_schema::container* c = 0);

  COUPLINGNODESET (const COUPLINGNODESET& x,
                   ::xml_schema::flags f = xml_schema::flags::dont_validate,
                   ::xml_schema::container* c = 0);

  virtual COUPLINGNODESET*
  _clone (::xml_schema::flags f = xml_schema::flags::dont_validate,
          ::xml_schema::container* c = 0) const;

  COUPLINGNODESET&
  operator= (const COUPLINGNODESET& x);

  virtual 
  ~COUPLINGNODESET ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  Name_optional Name_;
};

class PARTS: public ::xml_schema::type
{
  public:
  // PART
  //
  typedef ::PART PART_type;
  typedef ::xsd::cxx::tree::sequence< PART_type > PART_sequence;
  typedef PART_sequence::iterator PART_iterator;
  typedef PART_sequence::const_iterator PART_const_iterator;
  typedef ::xsd::cxx::tree::traits< PART_type, char > PART_traits;

  const PART_sequence&
  PART () const;

  PART_sequence&
  PART ();

  void
  PART (const PART_sequence& s);

  // Constructors.
  //
  PARTS ();

  PARTS (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f = xml_schema::flags::dont_validate,
         ::xml_schema::container* c = 0);

  PARTS (const PARTS& x,
         ::xml_schema::flags f = xml_schema::flags::dont_validate,
         ::xml_schema::container* c = 0);

  virtual PARTS*
  _clone (::xml_schema::flags f = xml_schema::flags::dont_validate,
          ::xml_schema::container* c = 0) const;

  PARTS&
  operator= (const PARTS& x);

  virtual 
  ~PARTS ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  PART_sequence PART_;
};

class ANALYSIS: public ::xml_schema::type
{
  public:
  // NAME
  //
  typedef ::xml_schema::string NAME_type;
  typedef ::xsd::cxx::tree::optional< NAME_type > NAME_optional;
  typedef ::xsd::cxx::tree::traits< NAME_type, char > NAME_traits;

  const NAME_optional&
  NAME () const;

  NAME_optional&
  NAME ();

  void
  NAME (const NAME_type& x);

  void
  NAME (const NAME_optional& x);

  void
  NAME (::std::auto_ptr< NAME_type > p);

  // TYPE
  //
  typedef ::xml_schema::string TYPE_type;
  typedef ::xsd::cxx::tree::optional< TYPE_type > TYPE_optional;
  typedef ::xsd::cxx::tree::traits< TYPE_type, char > TYPE_traits;

  const TYPE_optional&
  TYPE () const;

  TYPE_optional&
  TYPE ();

  void
  TYPE (const TYPE_type& x);

  void
  TYPE (const TYPE_optional& x);

  void
  TYPE (::std::auto_ptr< TYPE_type > p);

  // FREQUENCY
  //
  typedef ::FREQUENCY FREQUENCY_type;
  typedef ::xsd::cxx::tree::sequence< FREQUENCY_type > FREQUENCY_sequence;
  typedef FREQUENCY_sequence::iterator FREQUENCY_iterator;
  typedef FREQUENCY_sequence::const_iterator FREQUENCY_const_iterator;
  typedef ::xsd::cxx::tree::traits< FREQUENCY_type, char > FREQUENCY_traits;

  const FREQUENCY_sequence&
  FREQUENCY () const;

  FREQUENCY_sequence&
  FREQUENCY ();

  void
  FREQUENCY (const FREQUENCY_sequence& s);

  // FILEEXPORT
  //
  typedef ::FILEEXPORT FILEEXPORT_type;
  typedef ::xsd::cxx::tree::sequence< FILEEXPORT_type > FILEEXPORT_sequence;
  typedef FILEEXPORT_sequence::iterator FILEEXPORT_iterator;
  typedef FILEEXPORT_sequence::const_iterator FILEEXPORT_const_iterator;
  typedef ::xsd::cxx::tree::traits< FILEEXPORT_type, char > FILEEXPORT_traits;

  const FILEEXPORT_sequence&
  FILEEXPORT () const;

  FILEEXPORT_sequence&
  FILEEXPORT ();

  void
  FILEEXPORT (const FILEEXPORT_sequence& s);

  // BCCASE
  //
  typedef ::BCCASE BCCASE_type;
  typedef ::xsd::cxx::tree::sequence< BCCASE_type > BCCASE_sequence;
  typedef BCCASE_sequence::iterator BCCASE_iterator;
  typedef BCCASE_sequence::const_iterator BCCASE_const_iterator;
  typedef ::xsd::cxx::tree::traits< BCCASE_type, char > BCCASE_traits;

  const BCCASE_sequence&
  BCCASE () const;

  BCCASE_sequence&
  BCCASE ();

  void
  BCCASE (const BCCASE_sequence& s);

  // LOADCASES
  //
  typedef ::LOADCASES LOADCASES_type;
  typedef ::xsd::cxx::tree::sequence< LOADCASES_type > LOADCASES_sequence;
  typedef LOADCASES_sequence::iterator LOADCASES_iterator;
  typedef LOADCASES_sequence::const_iterator LOADCASES_const_iterator;
  typedef ::xsd::cxx::tree::traits< LOADCASES_type, char > LOADCASES_traits;

  const LOADCASES_sequence&
  LOADCASES () const;

  LOADCASES_sequence&
  LOADCASES ();

  void
  LOADCASES (const LOADCASES_sequence& s);

  // Constructors.
  //
  ANALYSIS ();

  ANALYSIS (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = xml_schema::flags::dont_validate,
            ::xml_schema::container* c = 0);

  ANALYSIS (const ANALYSIS& x,
            ::xml_schema::flags f = xml_schema::flags::dont_validate,
            ::xml_schema::container* c = 0);

  virtual ANALYSIS*
  _clone (::xml_schema::flags f = xml_schema::flags::dont_validate,
          ::xml_schema::container* c = 0) const;

  ANALYSIS&
  operator= (const ANALYSIS& x);

  virtual 
  ~ANALYSIS ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  NAME_optional NAME_;
  TYPE_optional TYPE_;
  FREQUENCY_sequence FREQUENCY_;
  FILEEXPORT_sequence FILEEXPORT_;
  BCCASE_sequence BCCASE_;
  LOADCASES_sequence LOADCASES_;
};

class PART: public ::xml_schema::type
{
  public:
  // ROMDATA
  //
  typedef ::ROMDATA ROMDATA_type;
  typedef ::xsd::cxx::tree::sequence< ROMDATA_type > ROMDATA_sequence;
  typedef ROMDATA_sequence::iterator ROMDATA_iterator;
  typedef ROMDATA_sequence::const_iterator ROMDATA_const_iterator;
  typedef ::xsd::cxx::tree::traits< ROMDATA_type, char > ROMDATA_traits;

  const ROMDATA_sequence&
  ROMDATA () const;

  ROMDATA_sequence&
  ROMDATA ();

  void
  ROMDATA (const ROMDATA_sequence& s);

  // FILEIMPORT
  //
  typedef ::FILEIMPORT FILEIMPORT_type;
  typedef ::xsd::cxx::tree::sequence< FILEIMPORT_type > FILEIMPORT_sequence;
  typedef FILEIMPORT_sequence::iterator FILEIMPORT_iterator;
  typedef FILEIMPORT_sequence::const_iterator FILEIMPORT_const_iterator;
  typedef ::xsd::cxx::tree::traits< FILEIMPORT_type, char > FILEIMPORT_traits;

  const FILEIMPORT_sequence&
  FILEIMPORT () const;

  FILEIMPORT_sequence&
  FILEIMPORT ();

  void
  FILEIMPORT (const FILEIMPORT_sequence& s);

  // MATERIALS
  //
  typedef ::MATERIALS MATERIALS_type;
  typedef ::xsd::cxx::tree::sequence< MATERIALS_type > MATERIALS_sequence;
  typedef MATERIALS_sequence::iterator MATERIALS_iterator;
  typedef MATERIALS_sequence::const_iterator MATERIALS_const_iterator;
  typedef ::xsd::cxx::tree::traits< MATERIALS_type, char > MATERIALS_traits;

  const MATERIALS_sequence&
  MATERIALS () const;

  MATERIALS_sequence&
  MATERIALS ();

  void
  MATERIALS (const MATERIALS_sequence& s);

  // SECTIONS
  //
  typedef ::SECTIONS SECTIONS_type;
  typedef ::xsd::cxx::tree::sequence< SECTIONS_type > SECTIONS_sequence;
  typedef SECTIONS_sequence::iterator SECTIONS_iterator;
  typedef SECTIONS_sequence::const_iterator SECTIONS_const_iterator;
  typedef ::xsd::cxx::tree::traits< SECTIONS_type, char > SECTIONS_traits;

  const SECTIONS_sequence&
  SECTIONS () const;

  SECTIONS_sequence&
  SECTIONS ();

  void
  SECTIONS (const SECTIONS_sequence& s);

  // SETS
  //
  typedef ::SETS SETS_type;
  typedef ::xsd::cxx::tree::sequence< SETS_type > SETS_sequence;
  typedef SETS_sequence::iterator SETS_iterator;
  typedef SETS_sequence::const_iterator SETS_const_iterator;
  typedef ::xsd::cxx::tree::traits< SETS_type, char > SETS_traits;

  const SETS_sequence&
  SETS () const;

  SETS_sequence&
  SETS ();

  void
  SETS (const SETS_sequence& s);

  // LOADS
  //
  typedef ::LOADS LOADS_type;
  typedef ::xsd::cxx::tree::sequence< LOADS_type > LOADS_sequence;
  typedef LOADS_sequence::iterator LOADS_iterator;
  typedef LOADS_sequence::const_iterator LOADS_const_iterator;
  typedef ::xsd::cxx::tree::traits< LOADS_type, char > LOADS_traits;

  const LOADS_sequence&
  LOADS () const;

  LOADS_sequence&
  LOADS ();

  void
  LOADS (const LOADS_sequence& s);

  // BC_DEF
  //
  typedef ::BC_DEF BC_DEF_type;
  typedef ::xsd::cxx::tree::sequence< BC_DEF_type > BC_DEF_sequence;
  typedef BC_DEF_sequence::iterator BC_DEF_iterator;
  typedef BC_DEF_sequence::const_iterator BC_DEF_const_iterator;
  typedef ::xsd::cxx::tree::traits< BC_DEF_type, char > BC_DEF_traits;

  const BC_DEF_sequence&
  BC_DEF () const;

  BC_DEF_sequence&
  BC_DEF ();

  void
  BC_DEF (const BC_DEF_sequence& s);

  // TYPE
  //
  typedef ::xml_schema::string TYPE_type;
  typedef ::xsd::cxx::tree::optional< TYPE_type > TYPE_optional;
  typedef ::xsd::cxx::tree::traits< TYPE_type, char > TYPE_traits;

  const TYPE_optional&
  TYPE () const;

  TYPE_optional&
  TYPE ();

  void
  TYPE (const TYPE_type& x);

  void
  TYPE (const TYPE_optional& x);

  void
  TYPE (::std::auto_ptr< TYPE_type > p);

  // Name
  //
  typedef ::xml_schema::string Name_type;
  typedef ::xsd::cxx::tree::optional< Name_type > Name_optional;
  typedef ::xsd::cxx::tree::traits< Name_type, char > Name_traits;

  const Name_optional&
  Name () const;

  Name_optional&
  Name ();

  void
  Name (const Name_type& x);

  void
  Name (const Name_optional& x);

  void
  Name (::std::auto_ptr< Name_type > p);

  // Constructors.
  //
  PART ();

  PART (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f = xml_schema::flags::dont_validate,
        ::xml_schema::container* c = 0);

  PART (const PART& x,
        ::xml_schema::flags f = xml_schema::flags::dont_validate,
        ::xml_schema::container* c = 0);

  virtual PART*
  _clone (::xml_schema::flags f = xml_schema::flags::dont_validate,
          ::xml_schema::container* c = 0) const;

  PART&
  operator= (const PART& x);

  virtual 
  ~PART ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ROMDATA_sequence ROMDATA_;
  FILEIMPORT_sequence FILEIMPORT_;
  MATERIALS_sequence MATERIALS_;
  SECTIONS_sequence SECTIONS_;
  SETS_sequence SETS_;
  LOADS_sequence LOADS_;
  BC_DEF_sequence BC_DEF_;
  TYPE_optional TYPE_;
  Name_optional Name_;
};

class FREQUENCY: public ::xml_schema::type
{
  public:
  // START_FREQ
  //
  typedef ::xml_schema::string START_FREQ_type;
  typedef ::xsd::cxx::tree::optional< START_FREQ_type > START_FREQ_optional;
  typedef ::xsd::cxx::tree::traits< START_FREQ_type, char > START_FREQ_traits;

  const START_FREQ_optional&
  START_FREQ () const;

  START_FREQ_optional&
  START_FREQ ();

  void
  START_FREQ (const START_FREQ_type& x);

  void
  START_FREQ (const START_FREQ_optional& x);

  void
  START_FREQ (::std::auto_ptr< START_FREQ_type > p);

  // END_FREQ
  //
  typedef ::xml_schema::string END_FREQ_type;
  typedef ::xsd::cxx::tree::optional< END_FREQ_type > END_FREQ_optional;
  typedef ::xsd::cxx::tree::traits< END_FREQ_type, char > END_FREQ_traits;

  const END_FREQ_optional&
  END_FREQ () const;

  END_FREQ_optional&
  END_FREQ ();

  void
  END_FREQ (const END_FREQ_type& x);

  void
  END_FREQ (const END_FREQ_optional& x);

  void
  END_FREQ (::std::auto_ptr< END_FREQ_type > p);

  // STEP_FREQ
  //
  typedef ::xml_schema::string STEP_FREQ_type;
  typedef ::xsd::cxx::tree::optional< STEP_FREQ_type > STEP_FREQ_optional;
  typedef ::xsd::cxx::tree::traits< STEP_FREQ_type, char > STEP_FREQ_traits;

  const STEP_FREQ_optional&
  STEP_FREQ () const;

  STEP_FREQ_optional&
  STEP_FREQ ();

  void
  STEP_FREQ (const STEP_FREQ_type& x);

  void
  STEP_FREQ (const STEP_FREQ_optional& x);

  void
  STEP_FREQ (::std::auto_ptr< STEP_FREQ_type > p);

  // Type
  //
  typedef ::xml_schema::string Type_type;
  typedef ::xsd::cxx::tree::optional< Type_type > Type_optional;
  typedef ::xsd::cxx::tree::traits< Type_type, char > Type_traits;

  const Type_optional&
  Type () const;

  Type_optional&
  Type ();

  void
  Type (const Type_type& x);

  void
  Type (const Type_optional& x);

  void
  Type (::std::auto_ptr< Type_type > p);

  // Constructors.
  //
  FREQUENCY ();

  FREQUENCY (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = xml_schema::flags::dont_validate,
             ::xml_schema::container* c = 0);

  FREQUENCY (const FREQUENCY& x,
             ::xml_schema::flags f = xml_schema::flags::dont_validate,
             ::xml_schema::container* c = 0);

  virtual FREQUENCY*
  _clone (::xml_schema::flags f = xml_schema::flags::dont_validate,
          ::xml_schema::container* c = 0) const;

  FREQUENCY&
  operator= (const FREQUENCY& x);

  virtual 
  ~FREQUENCY ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  START_FREQ_optional START_FREQ_;
  END_FREQ_optional END_FREQ_;
  STEP_FREQ_optional STEP_FREQ_;
  Type_optional Type_;
};

class FILEEXPORT: public ::xml_schema::type
{
  public:
  // EXPORT
  //
  typedef ::EXPORT EXPORT_type;
  typedef ::xsd::cxx::tree::sequence< EXPORT_type > EXPORT_sequence;
  typedef EXPORT_sequence::iterator EXPORT_iterator;
  typedef EXPORT_sequence::const_iterator EXPORT_const_iterator;
  typedef ::xsd::cxx::tree::traits< EXPORT_type, char > EXPORT_traits;

  const EXPORT_sequence&
  EXPORT () const;

  EXPORT_sequence&
  EXPORT ();

  void
  EXPORT (const EXPORT_sequence& s);

  // Type
  //
  typedef ::xml_schema::string Type_type;
  typedef ::xsd::cxx::tree::optional< Type_type > Type_optional;
  typedef ::xsd::cxx::tree::traits< Type_type, char > Type_traits;

  const Type_optional&
  Type () const;

  Type_optional&
  Type ();

  void
  Type (const Type_type& x);

  void
  Type (const Type_optional& x);

  void
  Type (::std::auto_ptr< Type_type > p);

  // Constructors.
  //
  FILEEXPORT ();

  FILEEXPORT (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = xml_schema::flags::dont_validate,
              ::xml_schema::container* c = 0);

  FILEEXPORT (const FILEEXPORT& x,
              ::xml_schema::flags f = xml_schema::flags::dont_validate,
              ::xml_schema::container* c = 0);

  virtual FILEEXPORT*
  _clone (::xml_schema::flags f = xml_schema::flags::dont_validate,
          ::xml_schema::container* c = 0) const;

  FILEEXPORT&
  operator= (const FILEEXPORT& x);

  virtual 
  ~FILEEXPORT ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  EXPORT_sequence EXPORT_;
  Type_optional Type_;
};

class BCCASE: public ::xml_schema::type
{
  public:
  // BC
  //
  typedef ::BC BC_type;
  typedef ::xsd::cxx::tree::sequence< BC_type > BC_sequence;
  typedef BC_sequence::iterator BC_iterator;
  typedef BC_sequence::const_iterator BC_const_iterator;
  typedef ::xsd::cxx::tree::traits< BC_type, char > BC_traits;

  const BC_sequence&
  BC () const;

  BC_sequence&
  BC ();

  void
  BC (const BC_sequence& s);

  // Name
  //
  typedef ::xml_schema::string Name_type;
  typedef ::xsd::cxx::tree::optional< Name_type > Name_optional;
  typedef ::xsd::cxx::tree::traits< Name_type, char > Name_traits;

  const Name_optional&
  Name () const;

  Name_optional&
  Name ();

  void
  Name (const Name_type& x);

  void
  Name (const Name_optional& x);

  void
  Name (::std::auto_ptr< Name_type > p);

  // Constructors.
  //
  BCCASE ();

  BCCASE (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = xml_schema::flags::dont_validate,
          ::xml_schema::container* c = 0);

  BCCASE (const BCCASE& x,
          ::xml_schema::flags f = xml_schema::flags::dont_validate,
          ::xml_schema::container* c = 0);

  virtual BCCASE*
  _clone (::xml_schema::flags f = xml_schema::flags::dont_validate,
          ::xml_schema::container* c = 0) const;

  BCCASE&
  operator= (const BCCASE& x);

  virtual 
  ~BCCASE ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  BC_sequence BC_;
  Name_optional Name_;
};

class LOADCASES: public ::xml_schema::type
{
  public:
  // LOADCASE
  //
  typedef ::LOADCASE LOADCASE_type;
  typedef ::xsd::cxx::tree::sequence< LOADCASE_type > LOADCASE_sequence;
  typedef LOADCASE_sequence::iterator LOADCASE_iterator;
  typedef LOADCASE_sequence::const_iterator LOADCASE_const_iterator;
  typedef ::xsd::cxx::tree::traits< LOADCASE_type, char > LOADCASE_traits;

  const LOADCASE_sequence&
  LOADCASE () const;

  LOADCASE_sequence&
  LOADCASE ();

  void
  LOADCASE (const LOADCASE_sequence& s);

  // Constructors.
  //
  LOADCASES ();

  LOADCASES (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = xml_schema::flags::dont_validate,
             ::xml_schema::container* c = 0);

  LOADCASES (const LOADCASES& x,
             ::xml_schema::flags f = xml_schema::flags::dont_validate,
             ::xml_schema::container* c = 0);

  virtual LOADCASES*
  _clone (::xml_schema::flags f = xml_schema::flags::dont_validate,
          ::xml_schema::container* c = 0) const;

  LOADCASES&
  operator= (const LOADCASES& x);

  virtual 
  ~LOADCASES ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  LOADCASE_sequence LOADCASE_;
};

class ROMDATA: public ::xml_schema::type
{
  public:
  // EXP_POINTS
  //
  typedef ::EXP_POINTS EXP_POINTS_type;
  typedef ::xsd::cxx::tree::sequence< EXP_POINTS_type > EXP_POINTS_sequence;
  typedef EXP_POINTS_sequence::iterator EXP_POINTS_iterator;
  typedef EXP_POINTS_sequence::const_iterator EXP_POINTS_const_iterator;
  typedef ::xsd::cxx::tree::traits< EXP_POINTS_type, char > EXP_POINTS_traits;

  const EXP_POINTS_sequence&
  EXP_POINTS () const;

  EXP_POINTS_sequence&
  EXP_POINTS ();

  void
  EXP_POINTS (const EXP_POINTS_sequence& s);

  // KRYLOV_ORDER
  //
  typedef ::KRYLOV_ORDER KRYLOV_ORDER_type;
  typedef ::xsd::cxx::tree::sequence< KRYLOV_ORDER_type > KRYLOV_ORDER_sequence;
  typedef KRYLOV_ORDER_sequence::iterator KRYLOV_ORDER_iterator;
  typedef KRYLOV_ORDER_sequence::const_iterator KRYLOV_ORDER_const_iterator;
  typedef ::xsd::cxx::tree::traits< KRYLOV_ORDER_type, char > KRYLOV_ORDER_traits;

  const KRYLOV_ORDER_sequence&
  KRYLOV_ORDER () const;

  KRYLOV_ORDER_sequence&
  KRYLOV_ORDER ();

  void
  KRYLOV_ORDER (const KRYLOV_ORDER_sequence& s);

  // INPUTS
  //
  typedef ::INPUTS INPUTS_type;
  typedef ::xsd::cxx::tree::sequence< INPUTS_type > INPUTS_sequence;
  typedef INPUTS_sequence::iterator INPUTS_iterator;
  typedef INPUTS_sequence::const_iterator INPUTS_const_iterator;
  typedef ::xsd::cxx::tree::traits< INPUTS_type, char > INPUTS_traits;

  const INPUTS_sequence&
  INPUTS () const;

  INPUTS_sequence&
  INPUTS ();

  void
  INPUTS (const INPUTS_sequence& s);

  // OUTPUTS
  //
  typedef ::OUTPUTS OUTPUTS_type;
  typedef ::xsd::cxx::tree::sequence< OUTPUTS_type > OUTPUTS_sequence;
  typedef OUTPUTS_sequence::iterator OUTPUTS_iterator;
  typedef OUTPUTS_sequence::const_iterator OUTPUTS_const_iterator;
  typedef ::xsd::cxx::tree::traits< OUTPUTS_type, char > OUTPUTS_traits;

  const OUTPUTS_sequence&
  OUTPUTS () const;

  OUTPUTS_sequence&
  OUTPUTS ();

  void
  OUTPUTS (const OUTPUTS_sequence& s);

  // Constructors.
  //
  ROMDATA ();

  ROMDATA (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = xml_schema::flags::dont_validate,
           ::xml_schema::container* c = 0);

  ROMDATA (const ROMDATA& x,
           ::xml_schema::flags f = xml_schema::flags::dont_validate,
           ::xml_schema::container* c = 0);

  virtual ROMDATA*
  _clone (::xml_schema::flags f = xml_schema::flags::dont_validate,
          ::xml_schema::container* c = 0) const;

  ROMDATA&
  operator= (const ROMDATA& x);

  virtual 
  ~ROMDATA ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  EXP_POINTS_sequence EXP_POINTS_;
  KRYLOV_ORDER_sequence KRYLOV_ORDER_;
  INPUTS_sequence INPUTS_;
  OUTPUTS_sequence OUTPUTS_;
};

class FILEIMPORT: public ::xml_schema::type
{
  public:
  // FILE
  //
  typedef ::xml_schema::string FILE_type;
  typedef ::xsd::cxx::tree::optional< FILE_type > FILE_optional;
  typedef ::xsd::cxx::tree::traits< FILE_type, char > FILE_traits;

  const FILE_optional&
  FILE () const;

  FILE_optional&
  FILE ();

  void
  FILE (const FILE_type& x);

  void
  FILE (const FILE_optional& x);

  void
  FILE (::std::auto_ptr< FILE_type > p);

  // IMPORT
  //
  typedef ::IMPORT IMPORT_type;
  typedef ::xsd::cxx::tree::sequence< IMPORT_type > IMPORT_sequence;
  typedef IMPORT_sequence::iterator IMPORT_iterator;
  typedef IMPORT_sequence::const_iterator IMPORT_const_iterator;
  typedef ::xsd::cxx::tree::traits< IMPORT_type, char > IMPORT_traits;

  const IMPORT_sequence&
  IMPORT () const;

  IMPORT_sequence&
  IMPORT ();

  void
  IMPORT (const IMPORT_sequence& s);

  // Type
  //
  typedef ::xml_schema::string Type_type;
  typedef ::xsd::cxx::tree::optional< Type_type > Type_optional;
  typedef ::xsd::cxx::tree::traits< Type_type, char > Type_traits;

  const Type_optional&
  Type () const;

  Type_optional&
  Type ();

  void
  Type (const Type_type& x);

  void
  Type (const Type_optional& x);

  void
  Type (::std::auto_ptr< Type_type > p);

  // Constructors.
  //
  FILEIMPORT ();

  FILEIMPORT (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = xml_schema::flags::dont_validate,
              ::xml_schema::container* c = 0);

  FILEIMPORT (const FILEIMPORT& x,
              ::xml_schema::flags f = xml_schema::flags::dont_validate,
              ::xml_schema::container* c = 0);

  virtual FILEIMPORT*
  _clone (::xml_schema::flags f = xml_schema::flags::dont_validate,
          ::xml_schema::container* c = 0) const;

  FILEIMPORT&
  operator= (const FILEIMPORT& x);

  virtual 
  ~FILEIMPORT ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  FILE_optional FILE_;
  IMPORT_sequence IMPORT_;
  Type_optional Type_;
};

class MATERIALS: public ::xml_schema::type
{
  public:
  // MATERIAL
  //
  typedef ::MATERIAL MATERIAL_type;
  typedef ::xsd::cxx::tree::sequence< MATERIAL_type > MATERIAL_sequence;
  typedef MATERIAL_sequence::iterator MATERIAL_iterator;
  typedef MATERIAL_sequence::const_iterator MATERIAL_const_iterator;
  typedef ::xsd::cxx::tree::traits< MATERIAL_type, char > MATERIAL_traits;

  const MATERIAL_sequence&
  MATERIAL () const;

  MATERIAL_sequence&
  MATERIAL ();

  void
  MATERIAL (const MATERIAL_sequence& s);

  // Constructors.
  //
  MATERIALS ();

  MATERIALS (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = xml_schema::flags::dont_validate,
             ::xml_schema::container* c = 0);

  MATERIALS (const MATERIALS& x,
             ::xml_schema::flags f = xml_schema::flags::dont_validate,
             ::xml_schema::container* c = 0);

  virtual MATERIALS*
  _clone (::xml_schema::flags f = xml_schema::flags::dont_validate,
          ::xml_schema::container* c = 0) const;

  MATERIALS&
  operator= (const MATERIALS& x);

  virtual 
  ~MATERIALS ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  MATERIAL_sequence MATERIAL_;
};

class SECTIONS: public ::xml_schema::type
{
  public:
  // SECTION
  //
  typedef ::SECTION SECTION_type;
  typedef ::xsd::cxx::tree::sequence< SECTION_type > SECTION_sequence;
  typedef SECTION_sequence::iterator SECTION_iterator;
  typedef SECTION_sequence::const_iterator SECTION_const_iterator;
  typedef ::xsd::cxx::tree::traits< SECTION_type, char > SECTION_traits;

  const SECTION_sequence&
  SECTION () const;

  SECTION_sequence&
  SECTION ();

  void
  SECTION (const SECTION_sequence& s);

  // Constructors.
  //
  SECTIONS ();

  SECTIONS (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = xml_schema::flags::dont_validate,
            ::xml_schema::container* c = 0);

  SECTIONS (const SECTIONS& x,
            ::xml_schema::flags f = xml_schema::flags::dont_validate,
            ::xml_schema::container* c = 0);

  virtual SECTIONS*
  _clone (::xml_schema::flags f = xml_schema::flags::dont_validate,
          ::xml_schema::container* c = 0) const;

  SECTIONS&
  operator= (const SECTIONS& x);

  virtual 
  ~SECTIONS ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  SECTION_sequence SECTION_;
};

class SETS: public ::xml_schema::type
{
  public:
  // ELEMENTSET
  //
  typedef ::ELEMENTSET ELEMENTSET_type;
  typedef ::xsd::cxx::tree::sequence< ELEMENTSET_type > ELEMENTSET_sequence;
  typedef ELEMENTSET_sequence::iterator ELEMENTSET_iterator;
  typedef ELEMENTSET_sequence::const_iterator ELEMENTSET_const_iterator;
  typedef ::xsd::cxx::tree::traits< ELEMENTSET_type, char > ELEMENTSET_traits;

  const ELEMENTSET_sequence&
  ELEMENTSET () const;

  ELEMENTSET_sequence&
  ELEMENTSET ();

  void
  ELEMENTSET (const ELEMENTSET_sequence& s);

  // NODESET
  //
  typedef ::NODESET NODESET_type;
  typedef ::xsd::cxx::tree::sequence< NODESET_type > NODESET_sequence;
  typedef NODESET_sequence::iterator NODESET_iterator;
  typedef NODESET_sequence::const_iterator NODESET_const_iterator;
  typedef ::xsd::cxx::tree::traits< NODESET_type, char > NODESET_traits;

  const NODESET_sequence&
  NODESET () const;

  NODESET_sequence&
  NODESET ();

  void
  NODESET (const NODESET_sequence& s);

  // Constructors.
  //
  SETS ();

  SETS (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f = xml_schema::flags::dont_validate,
        ::xml_schema::container* c = 0);

  SETS (const SETS& x,
        ::xml_schema::flags f = xml_schema::flags::dont_validate,
        ::xml_schema::container* c = 0);

  virtual SETS*
  _clone (::xml_schema::flags f = xml_schema::flags::dont_validate,
          ::xml_schema::container* c = 0) const;

  SETS&
  operator= (const SETS& x);

  virtual 
  ~SETS ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ELEMENTSET_sequence ELEMENTSET_;
  NODESET_sequence NODESET_;
};

class LOADS: public ::xml_schema::type
{
  public:
  // LOAD
  //
  typedef ::LOAD LOAD_type;
  typedef ::xsd::cxx::tree::sequence< LOAD_type > LOAD_sequence;
  typedef LOAD_sequence::iterator LOAD_iterator;
  typedef LOAD_sequence::const_iterator LOAD_const_iterator;
  typedef ::xsd::cxx::tree::traits< LOAD_type, char > LOAD_traits;

  const LOAD_sequence&
  LOAD () const;

  LOAD_sequence&
  LOAD ();

  void
  LOAD (const LOAD_sequence& s);

  // Constructors.
  //
  LOADS ();

  LOADS (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f = xml_schema::flags::dont_validate,
         ::xml_schema::container* c = 0);

  LOADS (const LOADS& x,
         ::xml_schema::flags f = xml_schema::flags::dont_validate,
         ::xml_schema::container* c = 0);

  virtual LOADS*
  _clone (::xml_schema::flags f = xml_schema::flags::dont_validate,
          ::xml_schema::container* c = 0) const;

  LOADS&
  operator= (const LOADS& x);

  virtual 
  ~LOADS ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  LOAD_sequence LOAD_;
};

class BC_DEF: public ::xml_schema::type
{
  public:
  // DISPLACEMENT
  //
  typedef ::DISPLACEMENT DISPLACEMENT_type;
  typedef ::xsd::cxx::tree::sequence< DISPLACEMENT_type > DISPLACEMENT_sequence;
  typedef DISPLACEMENT_sequence::iterator DISPLACEMENT_iterator;
  typedef DISPLACEMENT_sequence::const_iterator DISPLACEMENT_const_iterator;
  typedef ::xsd::cxx::tree::traits< DISPLACEMENT_type, char > DISPLACEMENT_traits;

  const DISPLACEMENT_sequence&
  DISPLACEMENT () const;

  DISPLACEMENT_sequence&
  DISPLACEMENT ();

  void
  DISPLACEMENT (const DISPLACEMENT_sequence& s);

  // Constructors.
  //
  BC_DEF ();

  BC_DEF (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = xml_schema::flags::dont_validate,
          ::xml_schema::container* c = 0);

  BC_DEF (const BC_DEF& x,
          ::xml_schema::flags f = xml_schema::flags::dont_validate,
          ::xml_schema::container* c = 0);

  virtual BC_DEF*
  _clone (::xml_schema::flags f = xml_schema::flags::dont_validate,
          ::xml_schema::container* c = 0) const;

  BC_DEF&
  operator= (const BC_DEF& x);

  virtual 
  ~BC_DEF ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  DISPLACEMENT_sequence DISPLACEMENT_;
};

class EXPORT: public ::xml_schema::type
{
  public:
  // INPUT_LOADCASE
  //
  typedef ::INPUT_LOADCASE INPUT_LOADCASE_type;
  typedef ::xsd::cxx::tree::sequence< INPUT_LOADCASE_type > INPUT_LOADCASE_sequence;
  typedef INPUT_LOADCASE_sequence::iterator INPUT_LOADCASE_iterator;
  typedef INPUT_LOADCASE_sequence::const_iterator INPUT_LOADCASE_const_iterator;
  typedef ::xsd::cxx::tree::traits< INPUT_LOADCASE_type, char > INPUT_LOADCASE_traits;

  const INPUT_LOADCASE_sequence&
  INPUT_LOADCASE () const;

  INPUT_LOADCASE_sequence&
  INPUT_LOADCASE ();

  void
  INPUT_LOADCASE (const INPUT_LOADCASE_sequence& s);

  // OUTPUTS_HISTORY
  //
  typedef ::OUTPUTS_HISTORY OUTPUTS_HISTORY_type;
  typedef ::xsd::cxx::tree::sequence< OUTPUTS_HISTORY_type > OUTPUTS_HISTORY_sequence;
  typedef OUTPUTS_HISTORY_sequence::iterator OUTPUTS_HISTORY_iterator;
  typedef OUTPUTS_HISTORY_sequence::const_iterator OUTPUTS_HISTORY_const_iterator;
  typedef ::xsd::cxx::tree::traits< OUTPUTS_HISTORY_type, char > OUTPUTS_HISTORY_traits;

  const OUTPUTS_HISTORY_sequence&
  OUTPUTS_HISTORY () const;

  OUTPUTS_HISTORY_sequence&
  OUTPUTS_HISTORY ();

  void
  OUTPUTS_HISTORY (const OUTPUTS_HISTORY_sequence& s);

  // Type
  //
  typedef ::xml_schema::string Type_type;
  typedef ::xsd::cxx::tree::optional< Type_type > Type_optional;
  typedef ::xsd::cxx::tree::traits< Type_type, char > Type_traits;

  const Type_optional&
  Type () const;

  Type_optional&
  Type ();

  void
  Type (const Type_type& x);

  void
  Type (const Type_optional& x);

  void
  Type (::std::auto_ptr< Type_type > p);

  // Constructors.
  //
  EXPORT ();

  EXPORT (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = xml_schema::flags::dont_validate,
          ::xml_schema::container* c = 0);

  EXPORT (const EXPORT& x,
          ::xml_schema::flags f = xml_schema::flags::dont_validate,
          ::xml_schema::container* c = 0);

  virtual EXPORT*
  _clone (::xml_schema::flags f = xml_schema::flags::dont_validate,
          ::xml_schema::container* c = 0) const;

  EXPORT&
  operator= (const EXPORT& x);

  virtual 
  ~EXPORT ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  INPUT_LOADCASE_sequence INPUT_LOADCASE_;
  OUTPUTS_HISTORY_sequence OUTPUTS_HISTORY_;
  Type_optional Type_;
};

class BC: public ::xml_schema::type
{
  public:
  // Name
  //
  typedef ::xml_schema::string Name_type;
  typedef ::xsd::cxx::tree::optional< Name_type > Name_optional;
  typedef ::xsd::cxx::tree::traits< Name_type, char > Name_traits;

  const Name_optional&
  Name () const;

  Name_optional&
  Name ();

  void
  Name (const Name_type& x);

  void
  Name (const Name_optional& x);

  void
  Name (::std::auto_ptr< Name_type > p);

  // Instance
  //
  typedef ::xml_schema::string Instance_type;
  typedef ::xsd::cxx::tree::optional< Instance_type > Instance_optional;
  typedef ::xsd::cxx::tree::traits< Instance_type, char > Instance_traits;

  const Instance_optional&
  Instance () const;

  Instance_optional&
  Instance ();

  void
  Instance (const Instance_type& x);

  void
  Instance (const Instance_optional& x);

  void
  Instance (::std::auto_ptr< Instance_type > p);

  // Constructors.
  //
  BC ();

  BC (const ::xercesc::DOMElement& e,
      ::xml_schema::flags f = xml_schema::flags::dont_validate,
      ::xml_schema::container* c = 0);

  BC (const BC& x,
      ::xml_schema::flags f = xml_schema::flags::dont_validate,
      ::xml_schema::container* c = 0);

  virtual BC*
  _clone (::xml_schema::flags f = xml_schema::flags::dont_validate,
          ::xml_schema::container* c = 0) const;

  BC&
  operator= (const BC& x);

  virtual 
  ~BC ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  Name_optional Name_;
  Instance_optional Instance_;
};

class LOADCASE: public ::xml_schema::type
{
  public:
  // START_THETA
  //
  typedef ::xml_schema::string START_THETA_type;
  typedef ::xsd::cxx::tree::optional< START_THETA_type > START_THETA_optional;
  typedef ::xsd::cxx::tree::traits< START_THETA_type, char > START_THETA_traits;

  const START_THETA_optional&
  START_THETA () const;

  START_THETA_optional&
  START_THETA ();

  void
  START_THETA (const START_THETA_type& x);

  void
  START_THETA (const START_THETA_optional& x);

  void
  START_THETA (::std::auto_ptr< START_THETA_type > p);

  // END_THETA
  //
  typedef ::xml_schema::string END_THETA_type;
  typedef ::xsd::cxx::tree::optional< END_THETA_type > END_THETA_optional;
  typedef ::xsd::cxx::tree::traits< END_THETA_type, char > END_THETA_traits;

  const END_THETA_optional&
  END_THETA () const;

  END_THETA_optional&
  END_THETA ();

  void
  END_THETA (const END_THETA_type& x);

  void
  END_THETA (const END_THETA_optional& x);

  void
  END_THETA (::std::auto_ptr< END_THETA_type > p);

  // STEP_THETA
  //
  typedef ::xml_schema::string STEP_THETA_type;
  typedef ::xsd::cxx::tree::optional< STEP_THETA_type > STEP_THETA_optional;
  typedef ::xsd::cxx::tree::traits< STEP_THETA_type, char > STEP_THETA_traits;

  const STEP_THETA_optional&
  STEP_THETA () const;

  STEP_THETA_optional&
  STEP_THETA ();

  void
  STEP_THETA (const STEP_THETA_type& x);

  void
  STEP_THETA (const STEP_THETA_optional& x);

  void
  STEP_THETA (::std::auto_ptr< STEP_THETA_type > p);

  // LOAD
  //
  typedef ::LOAD LOAD_type;
  typedef ::xsd::cxx::tree::sequence< LOAD_type > LOAD_sequence;
  typedef LOAD_sequence::iterator LOAD_iterator;
  typedef LOAD_sequence::const_iterator LOAD_const_iterator;
  typedef ::xsd::cxx::tree::traits< LOAD_type, char > LOAD_traits;

  const LOAD_sequence&
  LOAD () const;

  LOAD_sequence&
  LOAD ();

  void
  LOAD (const LOAD_sequence& s);

  // Type
  //
  typedef ::xml_schema::string Type_type;
  typedef ::xsd::cxx::tree::optional< Type_type > Type_optional;
  typedef ::xsd::cxx::tree::traits< Type_type, char > Type_traits;

  const Type_optional&
  Type () const;

  Type_optional&
  Type ();

  void
  Type (const Type_type& x);

  void
  Type (const Type_optional& x);

  void
  Type (::std::auto_ptr< Type_type > p);

  // NamePrefix
  //
  typedef ::xml_schema::string NamePrefix_type;
  typedef ::xsd::cxx::tree::optional< NamePrefix_type > NamePrefix_optional;
  typedef ::xsd::cxx::tree::traits< NamePrefix_type, char > NamePrefix_traits;

  const NamePrefix_optional&
  NamePrefix () const;

  NamePrefix_optional&
  NamePrefix ();

  void
  NamePrefix (const NamePrefix_type& x);

  void
  NamePrefix (const NamePrefix_optional& x);

  void
  NamePrefix (::std::auto_ptr< NamePrefix_type > p);

  // Constructors.
  //
  LOADCASE ();

  LOADCASE (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = xml_schema::flags::dont_validate,
            ::xml_schema::container* c = 0);

  LOADCASE (const LOADCASE& x,
            ::xml_schema::flags f = xml_schema::flags::dont_validate,
            ::xml_schema::container* c = 0);

  virtual LOADCASE*
  _clone (::xml_schema::flags f = xml_schema::flags::dont_validate,
          ::xml_schema::container* c = 0) const;

  LOADCASE&
  operator= (const LOADCASE& x);

  virtual 
  ~LOADCASE ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  START_THETA_optional START_THETA_;
  END_THETA_optional END_THETA_;
  STEP_THETA_optional STEP_THETA_;
  LOAD_sequence LOAD_;
  Type_optional Type_;
  NamePrefix_optional NamePrefix_;
};

class EXP_POINTS: public ::xml_schema::string
{
  public:
  // Type
  //
  typedef ::xml_schema::string Type_type;
  typedef ::xsd::cxx::tree::optional< Type_type > Type_optional;
  typedef ::xsd::cxx::tree::traits< Type_type, char > Type_traits;

  const Type_optional&
  Type () const;

  Type_optional&
  Type ();

  void
  Type (const Type_type& x);

  void
  Type (const Type_optional& x);

  void
  Type (::std::auto_ptr< Type_type > p);

  // Constructors.
  //
  EXP_POINTS ();

  EXP_POINTS (const char*);

  EXP_POINTS (const ::std::string&);

  EXP_POINTS (const ::xml_schema::string&);

  EXP_POINTS (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = xml_schema::flags::dont_validate,
              ::xml_schema::container* c = 0);

  EXP_POINTS (const EXP_POINTS& x,
              ::xml_schema::flags f = xml_schema::flags::dont_validate,
              ::xml_schema::container* c = 0);

  virtual EXP_POINTS*
  _clone (::xml_schema::flags f = xml_schema::flags::dont_validate,
          ::xml_schema::container* c = 0) const;

  EXP_POINTS&
  operator= (const EXP_POINTS& x);

  virtual 
  ~EXP_POINTS ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  Type_optional Type_;
};

class KRYLOV_ORDER: public ::xml_schema::string
{
  public:
  // Type
  //
  typedef ::xml_schema::string Type_type;
  typedef ::xsd::cxx::tree::optional< Type_type > Type_optional;
  typedef ::xsd::cxx::tree::traits< Type_type, char > Type_traits;

  const Type_optional&
  Type () const;

  Type_optional&
  Type ();

  void
  Type (const Type_type& x);

  void
  Type (const Type_optional& x);

  void
  Type (::std::auto_ptr< Type_type > p);

  // Constructors.
  //
  KRYLOV_ORDER ();

  KRYLOV_ORDER (const char*);

  KRYLOV_ORDER (const ::std::string&);

  KRYLOV_ORDER (const ::xml_schema::string&);

  KRYLOV_ORDER (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = xml_schema::flags::dont_validate,
                ::xml_schema::container* c = 0);

  KRYLOV_ORDER (const KRYLOV_ORDER& x,
                ::xml_schema::flags f = xml_schema::flags::dont_validate,
                ::xml_schema::container* c = 0);

  virtual KRYLOV_ORDER*
  _clone (::xml_schema::flags f = xml_schema::flags::dont_validate,
          ::xml_schema::container* c = 0) const;

  KRYLOV_ORDER&
  operator= (const KRYLOV_ORDER& x);

  virtual 
  ~KRYLOV_ORDER ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  Type_optional Type_;
};

class INPUTS: public ::xml_schema::type
{
  public:
  // NODESET
  //
  typedef ::NODESET NODESET_type;
  typedef ::xsd::cxx::tree::sequence< NODESET_type > NODESET_sequence;
  typedef NODESET_sequence::iterator NODESET_iterator;
  typedef NODESET_sequence::const_iterator NODESET_const_iterator;
  typedef ::xsd::cxx::tree::traits< NODESET_type, char > NODESET_traits;

  const NODESET_sequence&
  NODESET () const;

  NODESET_sequence&
  NODESET ();

  void
  NODESET (const NODESET_sequence& s);

  // Type
  //
  typedef ::xml_schema::string Type_type;
  typedef ::xsd::cxx::tree::optional< Type_type > Type_optional;
  typedef ::xsd::cxx::tree::traits< Type_type, char > Type_traits;

  const Type_optional&
  Type () const;

  Type_optional&
  Type ();

  void
  Type (const Type_type& x);

  void
  Type (const Type_optional& x);

  void
  Type (::std::auto_ptr< Type_type > p);

  // Constructors.
  //
  INPUTS ();

  INPUTS (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = xml_schema::flags::dont_validate,
          ::xml_schema::container* c = 0);

  INPUTS (const INPUTS& x,
          ::xml_schema::flags f = xml_schema::flags::dont_validate,
          ::xml_schema::container* c = 0);

  virtual INPUTS*
  _clone (::xml_schema::flags f = xml_schema::flags::dont_validate,
          ::xml_schema::container* c = 0) const;

  INPUTS&
  operator= (const INPUTS& x);

  virtual 
  ~INPUTS ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  NODESET_sequence NODESET_;
  Type_optional Type_;
};

class OUTPUTS: public ::xml_schema::type
{
  public:
  // Type
  //
  typedef ::xml_schema::string Type_type;
  typedef ::xsd::cxx::tree::optional< Type_type > Type_optional;
  typedef ::xsd::cxx::tree::traits< Type_type, char > Type_traits;

  const Type_optional&
  Type () const;

  Type_optional&
  Type ();

  void
  Type (const Type_type& x);

  void
  Type (const Type_optional& x);

  void
  Type (::std::auto_ptr< Type_type > p);

  // Constructors.
  //
  OUTPUTS ();

  OUTPUTS (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = xml_schema::flags::dont_validate,
           ::xml_schema::container* c = 0);

  OUTPUTS (const OUTPUTS& x,
           ::xml_schema::flags f = xml_schema::flags::dont_validate,
           ::xml_schema::container* c = 0);

  virtual OUTPUTS*
  _clone (::xml_schema::flags f = xml_schema::flags::dont_validate,
          ::xml_schema::container* c = 0) const;

  OUTPUTS&
  operator= (const OUTPUTS& x);

  virtual 
  ~OUTPUTS ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  Type_optional Type_;
};

class IMPORT: public ::xml_schema::type
{
  public:
  // LIST
  //
  typedef ::xml_schema::string LIST_type;
  typedef ::xsd::cxx::tree::optional< LIST_type > LIST_optional;
  typedef ::xsd::cxx::tree::traits< LIST_type, char > LIST_traits;

  const LIST_optional&
  LIST () const;

  LIST_optional&
  LIST ();

  void
  LIST (const LIST_type& x);

  void
  LIST (const LIST_optional& x);

  void
  LIST (::std::auto_ptr< LIST_type > p);

  // UMA
  //
  typedef ::UMA UMA_type;
  typedef ::xsd::cxx::tree::sequence< UMA_type > UMA_sequence;
  typedef UMA_sequence::iterator UMA_iterator;
  typedef UMA_sequence::const_iterator UMA_const_iterator;
  typedef ::xsd::cxx::tree::traits< UMA_type, char > UMA_traits;

  const UMA_sequence&
  UMA () const;

  UMA_sequence&
  UMA ();

  void
  UMA (const UMA_sequence& s);

  // NODE
  //
  typedef ::NODE NODE_type;
  typedef ::xsd::cxx::tree::sequence< NODE_type > NODE_sequence;
  typedef NODE_sequence::iterator NODE_iterator;
  typedef NODE_sequence::const_iterator NODE_const_iterator;
  typedef ::xsd::cxx::tree::traits< NODE_type, char > NODE_traits;

  const NODE_sequence&
  NODE () const;

  NODE_sequence&
  NODE ();

  void
  NODE (const NODE_sequence& s);

  // ELEMENT
  //
  typedef ::ELEMENT ELEMENT_type;
  typedef ::xsd::cxx::tree::sequence< ELEMENT_type > ELEMENT_sequence;
  typedef ELEMENT_sequence::iterator ELEMENT_iterator;
  typedef ELEMENT_sequence::const_iterator ELEMENT_const_iterator;
  typedef ::xsd::cxx::tree::traits< ELEMENT_type, char > ELEMENT_traits;

  const ELEMENT_sequence&
  ELEMENT () const;

  ELEMENT_sequence&
  ELEMENT ();

  void
  ELEMENT (const ELEMENT_sequence& s);

  // TRANSLATETO
  //
  typedef ::TRANSLATETO TRANSLATETO_type;
  typedef ::xsd::cxx::tree::sequence< TRANSLATETO_type > TRANSLATETO_sequence;
  typedef TRANSLATETO_sequence::iterator TRANSLATETO_iterator;
  typedef TRANSLATETO_sequence::const_iterator TRANSLATETO_const_iterator;
  typedef ::xsd::cxx::tree::traits< TRANSLATETO_type, char > TRANSLATETO_traits;

  const TRANSLATETO_sequence&
  TRANSLATETO () const;

  TRANSLATETO_sequence&
  TRANSLATETO ();

  void
  TRANSLATETO (const TRANSLATETO_sequence& s);

  // Type
  //
  typedef ::xml_schema::string Type_type;
  typedef ::xsd::cxx::tree::optional< Type_type > Type_optional;
  typedef ::xsd::cxx::tree::traits< Type_type, char > Type_traits;

  const Type_optional&
  Type () const;

  Type_optional&
  Type ();

  void
  Type (const Type_type& x);

  void
  Type (const Type_optional& x);

  void
  Type (::std::auto_ptr< Type_type > p);

  // Constructors.
  //
  IMPORT ();

  IMPORT (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = xml_schema::flags::dont_validate,
          ::xml_schema::container* c = 0);

  IMPORT (const IMPORT& x,
          ::xml_schema::flags f = xml_schema::flags::dont_validate,
          ::xml_schema::container* c = 0);

  virtual IMPORT*
  _clone (::xml_schema::flags f = xml_schema::flags::dont_validate,
          ::xml_schema::container* c = 0) const;

  IMPORT&
  operator= (const IMPORT& x);

  virtual 
  ~IMPORT ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  LIST_optional LIST_;
  UMA_sequence UMA_;
  NODE_sequence NODE_;
  ELEMENT_sequence ELEMENT_;
  TRANSLATETO_sequence TRANSLATETO_;
  Type_optional Type_;
};

class MATERIAL: public ::xml_schema::type
{
  public:
  // E
  //
  typedef ::xml_schema::string E_type;
  typedef ::xsd::cxx::tree::optional< E_type > E_optional;
  typedef ::xsd::cxx::tree::traits< E_type, char > E_traits;

  const E_optional&
  E () const;

  E_optional&
  E ();

  void
  E (const E_type& x);

  void
  E (const E_optional& x);

  void
  E (::std::auto_ptr< E_type > p);

  // nu
  //
  typedef ::xml_schema::string nu_type;
  typedef ::xsd::cxx::tree::optional< nu_type > nu_optional;
  typedef ::xsd::cxx::tree::traits< nu_type, char > nu_traits;

  const nu_optional&
  nu () const;

  nu_optional&
  nu ();

  void
  nu (const nu_type& x);

  void
  nu (const nu_optional& x);

  void
  nu (::std::auto_ptr< nu_type > p);

  // rho
  //
  typedef ::xml_schema::string rho_type;
  typedef ::xsd::cxx::tree::optional< rho_type > rho_optional;
  typedef ::xsd::cxx::tree::traits< rho_type, char > rho_traits;

  const rho_optional&
  rho () const;

  rho_optional&
  rho ();

  void
  rho (const rho_type& x);

  void
  rho (const rho_optional& x);

  void
  rho (::std::auto_ptr< rho_type > p);

  // eta
  //
  typedef ::xml_schema::string eta_type;
  typedef ::xsd::cxx::tree::optional< eta_type > eta_optional;
  typedef ::xsd::cxx::tree::traits< eta_type, char > eta_traits;

  const eta_optional&
  eta () const;

  eta_optional&
  eta ();

  void
  eta (const eta_type& x);

  void
  eta (const eta_optional& x);

  void
  eta (::std::auto_ptr< eta_type > p);

  // Name
  //
  typedef ::xml_schema::string Name_type;
  typedef ::xsd::cxx::tree::optional< Name_type > Name_optional;
  typedef ::xsd::cxx::tree::traits< Name_type, char > Name_traits;

  const Name_optional&
  Name () const;

  Name_optional&
  Name ();

  void
  Name (const Name_type& x);

  void
  Name (const Name_optional& x);

  void
  Name (::std::auto_ptr< Name_type > p);

  // Type
  //
  typedef ::xml_schema::string Type_type;
  typedef ::xsd::cxx::tree::optional< Type_type > Type_optional;
  typedef ::xsd::cxx::tree::traits< Type_type, char > Type_traits;

  const Type_optional&
  Type () const;

  Type_optional&
  Type ();

  void
  Type (const Type_type& x);

  void
  Type (const Type_optional& x);

  void
  Type (::std::auto_ptr< Type_type > p);

  // Constructors.
  //
  MATERIAL ();

  MATERIAL (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = xml_schema::flags::dont_validate,
            ::xml_schema::container* c = 0);

  MATERIAL (const MATERIAL& x,
            ::xml_schema::flags f = xml_schema::flags::dont_validate,
            ::xml_schema::container* c = 0);

  virtual MATERIAL*
  _clone (::xml_schema::flags f = xml_schema::flags::dont_validate,
          ::xml_schema::container* c = 0) const;

  MATERIAL&
  operator= (const MATERIAL& x);

  virtual 
  ~MATERIAL ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  E_optional E_;
  nu_optional nu_;
  rho_optional rho_;
  eta_optional eta_;
  Name_optional Name_;
  Type_optional Type_;
};

class SECTION: public ::xml_schema::type
{
  public:
  // ELEMENTSET
  //
  typedef ::xml_schema::string ELEMENTSET_type;
  typedef ::xsd::cxx::tree::optional< ELEMENTSET_type > ELEMENTSET_optional;
  typedef ::xsd::cxx::tree::traits< ELEMENTSET_type, char > ELEMENTSET_traits;

  const ELEMENTSET_optional&
  ELEMENTSET () const;

  ELEMENTSET_optional&
  ELEMENTSET ();

  void
  ELEMENTSET (const ELEMENTSET_type& x);

  void
  ELEMENTSET (const ELEMENTSET_optional& x);

  void
  ELEMENTSET (::std::auto_ptr< ELEMENTSET_type > p);

  // MATERIAL
  //
  typedef ::xml_schema::string MATERIAL_type;
  typedef ::xsd::cxx::tree::optional< MATERIAL_type > MATERIAL_optional;
  typedef ::xsd::cxx::tree::traits< MATERIAL_type, char > MATERIAL_traits;

  const MATERIAL_optional&
  MATERIAL () const;

  MATERIAL_optional&
  MATERIAL ();

  void
  MATERIAL (const MATERIAL_type& x);

  void
  MATERIAL (const MATERIAL_optional& x);

  void
  MATERIAL (::std::auto_ptr< MATERIAL_type > p);

  // Name
  //
  typedef ::xml_schema::string Name_type;
  typedef ::xsd::cxx::tree::optional< Name_type > Name_optional;
  typedef ::xsd::cxx::tree::traits< Name_type, char > Name_traits;

  const Name_optional&
  Name () const;

  Name_optional&
  Name ();

  void
  Name (const Name_type& x);

  void
  Name (const Name_optional& x);

  void
  Name (::std::auto_ptr< Name_type > p);

  // Constructors.
  //
  SECTION ();

  SECTION (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = xml_schema::flags::dont_validate,
           ::xml_schema::container* c = 0);

  SECTION (const SECTION& x,
           ::xml_schema::flags f = xml_schema::flags::dont_validate,
           ::xml_schema::container* c = 0);

  virtual SECTION*
  _clone (::xml_schema::flags f = xml_schema::flags::dont_validate,
          ::xml_schema::container* c = 0) const;

  SECTION&
  operator= (const SECTION& x);

  virtual 
  ~SECTION ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ELEMENTSET_optional ELEMENTSET_;
  MATERIAL_optional MATERIAL_;
  Name_optional Name_;
};

class ELEMENTSET: public ::xml_schema::type
{
  public:
  // LIST
  //
  typedef ::xml_schema::string LIST_type;
  typedef ::xsd::cxx::tree::optional< LIST_type > LIST_optional;
  typedef ::xsd::cxx::tree::traits< LIST_type, char > LIST_traits;

  const LIST_optional&
  LIST () const;

  LIST_optional&
  LIST ();

  void
  LIST (const LIST_type& x);

  void
  LIST (const LIST_optional& x);

  void
  LIST (::std::auto_ptr< LIST_type > p);

  // Name
  //
  typedef ::xml_schema::string Name_type;
  typedef ::xsd::cxx::tree::optional< Name_type > Name_optional;
  typedef ::xsd::cxx::tree::traits< Name_type, char > Name_traits;

  const Name_optional&
  Name () const;

  Name_optional&
  Name ();

  void
  Name (const Name_type& x);

  void
  Name (const Name_optional& x);

  void
  Name (::std::auto_ptr< Name_type > p);

  // Constructors.
  //
  ELEMENTSET ();

  ELEMENTSET (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = xml_schema::flags::dont_validate,
              ::xml_schema::container* c = 0);

  ELEMENTSET (const ELEMENTSET& x,
              ::xml_schema::flags f = xml_schema::flags::dont_validate,
              ::xml_schema::container* c = 0);

  virtual ELEMENTSET*
  _clone (::xml_schema::flags f = xml_schema::flags::dont_validate,
          ::xml_schema::container* c = 0) const;

  ELEMENTSET&
  operator= (const ELEMENTSET& x);

  virtual 
  ~ELEMENTSET ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  LIST_optional LIST_;
  Name_optional Name_;
};

class DISPLACEMENT: public ::xml_schema::type
{
  public:
  // NODESET
  //
  typedef ::NODESET NODESET_type;
  typedef ::xsd::cxx::tree::sequence< NODESET_type > NODESET_sequence;
  typedef NODESET_sequence::iterator NODESET_iterator;
  typedef NODESET_sequence::const_iterator NODESET_const_iterator;
  typedef ::xsd::cxx::tree::traits< NODESET_type, char > NODESET_traits;

  const NODESET_sequence&
  NODESET () const;

  NODESET_sequence&
  NODESET ();

  void
  NODESET (const NODESET_sequence& s);

  // REAL
  //
  typedef ::REAL REAL_type;
  typedef ::xsd::cxx::tree::sequence< REAL_type > REAL_sequence;
  typedef REAL_sequence::iterator REAL_iterator;
  typedef REAL_sequence::const_iterator REAL_const_iterator;
  typedef ::xsd::cxx::tree::traits< REAL_type, char > REAL_traits;

  const REAL_sequence&
  REAL () const;

  REAL_sequence&
  REAL ();

  void
  REAL (const REAL_sequence& s);

  // IMAGINARY
  //
  typedef ::IMAGINARY IMAGINARY_type;
  typedef ::xsd::cxx::tree::sequence< IMAGINARY_type > IMAGINARY_sequence;
  typedef IMAGINARY_sequence::iterator IMAGINARY_iterator;
  typedef IMAGINARY_sequence::const_iterator IMAGINARY_const_iterator;
  typedef ::xsd::cxx::tree::traits< IMAGINARY_type, char > IMAGINARY_traits;

  const IMAGINARY_sequence&
  IMAGINARY () const;

  IMAGINARY_sequence&
  IMAGINARY ();

  void
  IMAGINARY (const IMAGINARY_sequence& s);

  // Name
  //
  typedef ::xml_schema::string Name_type;
  typedef ::xsd::cxx::tree::optional< Name_type > Name_optional;
  typedef ::xsd::cxx::tree::traits< Name_type, char > Name_traits;

  const Name_optional&
  Name () const;

  Name_optional&
  Name ();

  void
  Name (const Name_type& x);

  void
  Name (const Name_optional& x);

  void
  Name (::std::auto_ptr< Name_type > p);

  // Constructors.
  //
  DISPLACEMENT ();

  DISPLACEMENT (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = xml_schema::flags::dont_validate,
                ::xml_schema::container* c = 0);

  DISPLACEMENT (const DISPLACEMENT& x,
                ::xml_schema::flags f = xml_schema::flags::dont_validate,
                ::xml_schema::container* c = 0);

  virtual DISPLACEMENT*
  _clone (::xml_schema::flags f = xml_schema::flags::dont_validate,
          ::xml_schema::container* c = 0) const;

  DISPLACEMENT&
  operator= (const DISPLACEMENT& x);

  virtual 
  ~DISPLACEMENT ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  NODESET_sequence NODESET_;
  REAL_sequence REAL_;
  IMAGINARY_sequence IMAGINARY_;
  Name_optional Name_;
};

class INPUT_LOADCASE: public ::xml_schema::type
{
  public:
  // NODESET
  //
  typedef ::NODESET NODESET_type;
  typedef ::xsd::cxx::tree::sequence< NODESET_type > NODESET_sequence;
  typedef NODESET_sequence::iterator NODESET_iterator;
  typedef NODESET_sequence::const_iterator NODESET_const_iterator;
  typedef ::xsd::cxx::tree::traits< NODESET_type, char > NODESET_traits;

  const NODESET_sequence&
  NODESET () const;

  NODESET_sequence&
  NODESET ();

  void
  NODESET (const NODESET_sequence& s);

  // Type
  //
  typedef ::xml_schema::string Type_type;
  typedef ::xsd::cxx::tree::optional< Type_type > Type_optional;
  typedef ::xsd::cxx::tree::traits< Type_type, char > Type_traits;

  const Type_optional&
  Type () const;

  Type_optional&
  Type ();

  void
  Type (const Type_type& x);

  void
  Type (const Type_optional& x);

  void
  Type (::std::auto_ptr< Type_type > p);

  // Constructors.
  //
  INPUT_LOADCASE ();

  INPUT_LOADCASE (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = xml_schema::flags::dont_validate,
                  ::xml_schema::container* c = 0);

  INPUT_LOADCASE (const INPUT_LOADCASE& x,
                  ::xml_schema::flags f = xml_schema::flags::dont_validate,
                  ::xml_schema::container* c = 0);

  virtual INPUT_LOADCASE*
  _clone (::xml_schema::flags f = xml_schema::flags::dont_validate,
          ::xml_schema::container* c = 0) const;

  INPUT_LOADCASE&
  operator= (const INPUT_LOADCASE& x);

  virtual 
  ~INPUT_LOADCASE ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  NODESET_sequence NODESET_;
  Type_optional Type_;
};

class OUTPUTS_HISTORY: public ::xml_schema::type
{
  public:
  // Type
  //
  typedef ::xml_schema::string Type_type;
  typedef ::xsd::cxx::tree::optional< Type_type > Type_optional;
  typedef ::xsd::cxx::tree::traits< Type_type, char > Type_traits;

  const Type_optional&
  Type () const;

  Type_optional&
  Type ();

  void
  Type (const Type_type& x);

  void
  Type (const Type_optional& x);

  void
  Type (::std::auto_ptr< Type_type > p);

  // Constructors.
  //
  OUTPUTS_HISTORY ();

  OUTPUTS_HISTORY (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = xml_schema::flags::dont_validate,
                   ::xml_schema::container* c = 0);

  OUTPUTS_HISTORY (const OUTPUTS_HISTORY& x,
                   ::xml_schema::flags f = xml_schema::flags::dont_validate,
                   ::xml_schema::container* c = 0);

  virtual OUTPUTS_HISTORY*
  _clone (::xml_schema::flags f = xml_schema::flags::dont_validate,
          ::xml_schema::container* c = 0) const;

  OUTPUTS_HISTORY&
  operator= (const OUTPUTS_HISTORY& x);

  virtual 
  ~OUTPUTS_HISTORY ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  Type_optional Type_;
};

class UMA: public ::xml_schema::type
{
  public:
  // Type
  //
  typedef ::xml_schema::string Type_type;
  typedef ::xsd::cxx::tree::optional< Type_type > Type_optional;
  typedef ::xsd::cxx::tree::traits< Type_type, char > Type_traits;

  const Type_optional&
  Type () const;

  Type_optional&
  Type ();

  void
  Type (const Type_type& x);

  void
  Type (const Type_optional& x);

  void
  Type (::std::auto_ptr< Type_type > p);

  // Constructors.
  //
  UMA ();

  UMA (const ::xercesc::DOMElement& e,
       ::xml_schema::flags f = xml_schema::flags::dont_validate,
       ::xml_schema::container* c = 0);

  UMA (const UMA& x,
       ::xml_schema::flags f = xml_schema::flags::dont_validate,
       ::xml_schema::container* c = 0);

  virtual UMA*
  _clone (::xml_schema::flags f = xml_schema::flags::dont_validate,
          ::xml_schema::container* c = 0) const;

  UMA&
  operator= (const UMA& x);

  virtual 
  ~UMA ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  Type_optional Type_;
};

class NODE: public ::xml_schema::type
{
  public:
  // TRANSLATETO
  //
  typedef ::TRANSLATETO TRANSLATETO_type;
  typedef ::xsd::cxx::tree::sequence< TRANSLATETO_type > TRANSLATETO_sequence;
  typedef TRANSLATETO_sequence::iterator TRANSLATETO_iterator;
  typedef TRANSLATETO_sequence::const_iterator TRANSLATETO_const_iterator;
  typedef ::xsd::cxx::tree::traits< TRANSLATETO_type, char > TRANSLATETO_traits;

  const TRANSLATETO_sequence&
  TRANSLATETO () const;

  TRANSLATETO_sequence&
  TRANSLATETO ();

  void
  TRANSLATETO (const TRANSLATETO_sequence& s);

  // Constructors.
  //
  NODE ();

  NODE (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f = xml_schema::flags::dont_validate,
        ::xml_schema::container* c = 0);

  NODE (const NODE& x,
        ::xml_schema::flags f = xml_schema::flags::dont_validate,
        ::xml_schema::container* c = 0);

  virtual NODE*
  _clone (::xml_schema::flags f = xml_schema::flags::dont_validate,
          ::xml_schema::container* c = 0) const;

  NODE&
  operator= (const NODE& x);

  virtual 
  ~NODE ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  TRANSLATETO_sequence TRANSLATETO_;
};

class ELEMENT: public ::xml_schema::type
{
  public:
  // TRANSLATETO
  //
  typedef ::TRANSLATETO TRANSLATETO_type;
  typedef ::xsd::cxx::tree::sequence< TRANSLATETO_type > TRANSLATETO_sequence;
  typedef TRANSLATETO_sequence::iterator TRANSLATETO_iterator;
  typedef TRANSLATETO_sequence::const_iterator TRANSLATETO_const_iterator;
  typedef ::xsd::cxx::tree::traits< TRANSLATETO_type, char > TRANSLATETO_traits;

  const TRANSLATETO_sequence&
  TRANSLATETO () const;

  TRANSLATETO_sequence&
  TRANSLATETO ();

  void
  TRANSLATETO (const TRANSLATETO_sequence& s);

  // Constructors.
  //
  ELEMENT ();

  ELEMENT (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = xml_schema::flags::dont_validate,
           ::xml_schema::container* c = 0);

  ELEMENT (const ELEMENT& x,
           ::xml_schema::flags f = xml_schema::flags::dont_validate,
           ::xml_schema::container* c = 0);

  virtual ELEMENT*
  _clone (::xml_schema::flags f = xml_schema::flags::dont_validate,
          ::xml_schema::container* c = 0) const;

  ELEMENT&
  operator= (const ELEMENT& x);

  virtual 
  ~ELEMENT ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  TRANSLATETO_sequence TRANSLATETO_;
};

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

// Parse a URI or a local file.
//

::std::auto_ptr< ::NODESET >
NODESET_ (const ::std::string& uri,
          ::xml_schema::flags f = xml_schema::flags::dont_validate,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::NODESET >
NODESET_ (const ::std::string& uri,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = xml_schema::flags::dont_validate,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::NODESET >
NODESET_ (const ::std::string& uri,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = xml_schema::flags::dont_validate,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::NODESET >
NODESET_ (::std::istream& is,
          ::xml_schema::flags f = xml_schema::flags::dont_validate,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::NODESET >
NODESET_ (::std::istream& is,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = xml_schema::flags::dont_validate,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::NODESET >
NODESET_ (::std::istream& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = xml_schema::flags::dont_validate,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::NODESET >
NODESET_ (::std::istream& is,
          const ::std::string& id,
          ::xml_schema::flags f = xml_schema::flags::dont_validate,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::NODESET >
NODESET_ (::std::istream& is,
          const ::std::string& id,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = xml_schema::flags::dont_validate,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::NODESET >
NODESET_ (::std::istream& is,
          const ::std::string& id,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = xml_schema::flags::dont_validate,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::NODESET >
NODESET_ (::xercesc::InputSource& is,
          ::xml_schema::flags f = xml_schema::flags::dont_validate,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::NODESET >
NODESET_ (::xercesc::InputSource& is,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = xml_schema::flags::dont_validate,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::NODESET >
NODESET_ (::xercesc::InputSource& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = xml_schema::flags::dont_validate,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::NODESET >
NODESET_ (const ::xercesc::DOMDocument& d,
          ::xml_schema::flags f = xml_schema::flags::dont_validate,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::NODESET >
NODESET_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
          ::xml_schema::flags f = xml_schema::flags::dont_validate,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::TRANSLATETO >
TRANSLATETO_ (const ::std::string& uri,
              ::xml_schema::flags f = xml_schema::flags::dont_validate,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::TRANSLATETO >
TRANSLATETO_ (const ::std::string& uri,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = xml_schema::flags::dont_validate,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::TRANSLATETO >
TRANSLATETO_ (const ::std::string& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = xml_schema::flags::dont_validate,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::TRANSLATETO >
TRANSLATETO_ (::std::istream& is,
              ::xml_schema::flags f = xml_schema::flags::dont_validate,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::TRANSLATETO >
TRANSLATETO_ (::std::istream& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = xml_schema::flags::dont_validate,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::TRANSLATETO >
TRANSLATETO_ (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = xml_schema::flags::dont_validate,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::TRANSLATETO >
TRANSLATETO_ (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::flags f = xml_schema::flags::dont_validate,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::TRANSLATETO >
TRANSLATETO_ (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = xml_schema::flags::dont_validate,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::TRANSLATETO >
TRANSLATETO_ (::std::istream& is,
              const ::std::string& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = xml_schema::flags::dont_validate,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::TRANSLATETO >
TRANSLATETO_ (::xercesc::InputSource& is,
              ::xml_schema::flags f = xml_schema::flags::dont_validate,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::TRANSLATETO >
TRANSLATETO_ (::xercesc::InputSource& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = xml_schema::flags::dont_validate,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::TRANSLATETO >
TRANSLATETO_ (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = xml_schema::flags::dont_validate,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::TRANSLATETO >
TRANSLATETO_ (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f = xml_schema::flags::dont_validate,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::TRANSLATETO >
TRANSLATETO_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
              ::xml_schema::flags f = xml_schema::flags::dont_validate,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::LOAD >
LOAD_ (const ::std::string& uri,
       ::xml_schema::flags f = xml_schema::flags::dont_validate,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::LOAD >
LOAD_ (const ::std::string& uri,
       ::xml_schema::error_handler& eh,
       ::xml_schema::flags f = xml_schema::flags::dont_validate,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::LOAD >
LOAD_ (const ::std::string& uri,
       ::xercesc::DOMErrorHandler& eh,
       ::xml_schema::flags f = xml_schema::flags::dont_validate,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::LOAD >
LOAD_ (::std::istream& is,
       ::xml_schema::flags f = xml_schema::flags::dont_validate,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::LOAD >
LOAD_ (::std::istream& is,
       ::xml_schema::error_handler& eh,
       ::xml_schema::flags f = xml_schema::flags::dont_validate,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::LOAD >
LOAD_ (::std::istream& is,
       ::xercesc::DOMErrorHandler& eh,
       ::xml_schema::flags f = xml_schema::flags::dont_validate,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::LOAD >
LOAD_ (::std::istream& is,
       const ::std::string& id,
       ::xml_schema::flags f = xml_schema::flags::dont_validate,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::LOAD >
LOAD_ (::std::istream& is,
       const ::std::string& id,
       ::xml_schema::error_handler& eh,
       ::xml_schema::flags f = xml_schema::flags::dont_validate,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::LOAD >
LOAD_ (::std::istream& is,
       const ::std::string& id,
       ::xercesc::DOMErrorHandler& eh,
       ::xml_schema::flags f = xml_schema::flags::dont_validate,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::LOAD >
LOAD_ (::xercesc::InputSource& is,
       ::xml_schema::flags f = xml_schema::flags::dont_validate,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::LOAD >
LOAD_ (::xercesc::InputSource& is,
       ::xml_schema::error_handler& eh,
       ::xml_schema::flags f = xml_schema::flags::dont_validate,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::LOAD >
LOAD_ (::xercesc::InputSource& is,
       ::xercesc::DOMErrorHandler& eh,
       ::xml_schema::flags f = xml_schema::flags::dont_validate,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::LOAD >
LOAD_ (const ::xercesc::DOMDocument& d,
       ::xml_schema::flags f = xml_schema::flags::dont_validate,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::LOAD >
LOAD_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
       ::xml_schema::flags f = xml_schema::flags::dont_validate,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::REAL >
REAL_ (const ::std::string& uri,
       ::xml_schema::flags f = xml_schema::flags::dont_validate,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::REAL >
REAL_ (const ::std::string& uri,
       ::xml_schema::error_handler& eh,
       ::xml_schema::flags f = xml_schema::flags::dont_validate,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::REAL >
REAL_ (const ::std::string& uri,
       ::xercesc::DOMErrorHandler& eh,
       ::xml_schema::flags f = xml_schema::flags::dont_validate,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::REAL >
REAL_ (::std::istream& is,
       ::xml_schema::flags f = xml_schema::flags::dont_validate,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::REAL >
REAL_ (::std::istream& is,
       ::xml_schema::error_handler& eh,
       ::xml_schema::flags f = xml_schema::flags::dont_validate,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::REAL >
REAL_ (::std::istream& is,
       ::xercesc::DOMErrorHandler& eh,
       ::xml_schema::flags f = xml_schema::flags::dont_validate,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::REAL >
REAL_ (::std::istream& is,
       const ::std::string& id,
       ::xml_schema::flags f = xml_schema::flags::dont_validate,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::REAL >
REAL_ (::std::istream& is,
       const ::std::string& id,
       ::xml_schema::error_handler& eh,
       ::xml_schema::flags f = xml_schema::flags::dont_validate,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::REAL >
REAL_ (::std::istream& is,
       const ::std::string& id,
       ::xercesc::DOMErrorHandler& eh,
       ::xml_schema::flags f = xml_schema::flags::dont_validate,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::REAL >
REAL_ (::xercesc::InputSource& is,
       ::xml_schema::flags f = xml_schema::flags::dont_validate,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::REAL >
REAL_ (::xercesc::InputSource& is,
       ::xml_schema::error_handler& eh,
       ::xml_schema::flags f = xml_schema::flags::dont_validate,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::REAL >
REAL_ (::xercesc::InputSource& is,
       ::xercesc::DOMErrorHandler& eh,
       ::xml_schema::flags f = xml_schema::flags::dont_validate,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::REAL >
REAL_ (const ::xercesc::DOMDocument& d,
       ::xml_schema::flags f = xml_schema::flags::dont_validate,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::REAL >
REAL_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
       ::xml_schema::flags f = xml_schema::flags::dont_validate,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::IMAGINARY >
IMAGINARY_ (const ::std::string& uri,
            ::xml_schema::flags f = xml_schema::flags::dont_validate,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::IMAGINARY >
IMAGINARY_ (const ::std::string& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = xml_schema::flags::dont_validate,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::IMAGINARY >
IMAGINARY_ (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = xml_schema::flags::dont_validate,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::IMAGINARY >
IMAGINARY_ (::std::istream& is,
            ::xml_schema::flags f = xml_schema::flags::dont_validate,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::IMAGINARY >
IMAGINARY_ (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = xml_schema::flags::dont_validate,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::IMAGINARY >
IMAGINARY_ (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = xml_schema::flags::dont_validate,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::IMAGINARY >
IMAGINARY_ (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::flags f = xml_schema::flags::dont_validate,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::IMAGINARY >
IMAGINARY_ (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = xml_schema::flags::dont_validate,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::IMAGINARY >
IMAGINARY_ (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = xml_schema::flags::dont_validate,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::IMAGINARY >
IMAGINARY_ (::xercesc::InputSource& is,
            ::xml_schema::flags f = xml_schema::flags::dont_validate,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::IMAGINARY >
IMAGINARY_ (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = xml_schema::flags::dont_validate,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::IMAGINARY >
IMAGINARY_ (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = xml_schema::flags::dont_validate,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::IMAGINARY >
IMAGINARY_ (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = xml_schema::flags::dont_validate,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::IMAGINARY >
IMAGINARY_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
            ::xml_schema::flags f = xml_schema::flags::dont_validate,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::STACCATO_XML >
STACCATO_XML_ (const ::std::string& uri,
               ::xml_schema::flags f = xml_schema::flags::dont_validate,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::STACCATO_XML >
STACCATO_XML_ (const ::std::string& uri,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = xml_schema::flags::dont_validate,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::STACCATO_XML >
STACCATO_XML_ (const ::std::string& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = xml_schema::flags::dont_validate,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::STACCATO_XML >
STACCATO_XML_ (::std::istream& is,
               ::xml_schema::flags f = xml_schema::flags::dont_validate,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::STACCATO_XML >
STACCATO_XML_ (::std::istream& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = xml_schema::flags::dont_validate,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::STACCATO_XML >
STACCATO_XML_ (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = xml_schema::flags::dont_validate,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::STACCATO_XML >
STACCATO_XML_ (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::flags f = xml_schema::flags::dont_validate,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::STACCATO_XML >
STACCATO_XML_ (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = xml_schema::flags::dont_validate,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::STACCATO_XML >
STACCATO_XML_ (::std::istream& is,
               const ::std::string& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = xml_schema::flags::dont_validate,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::STACCATO_XML >
STACCATO_XML_ (::xercesc::InputSource& is,
               ::xml_schema::flags f = xml_schema::flags::dont_validate,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::STACCATO_XML >
STACCATO_XML_ (::xercesc::InputSource& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = xml_schema::flags::dont_validate,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::STACCATO_XML >
STACCATO_XML_ (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = xml_schema::flags::dont_validate,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::STACCATO_XML >
STACCATO_XML_ (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f = xml_schema::flags::dont_validate,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::STACCATO_XML >
STACCATO_XML_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
               ::xml_schema::flags f = xml_schema::flags::dont_validate,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // IP_STACCATO_XML_HXX
