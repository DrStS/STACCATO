// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef IP_STACCATO_XML_HXX
#define IP_STACCATO_XML_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
class NODESET;
class REAL;
class IMAGINARY;
class STACCATO_XML;
class ANALYSIS;
class FREQUENCY;
class MATERIALS;
class SECTIONS;
class NODES;
class ELEMENTS;
class SETS;
class LOADS;
class BC;
class MATERIAL;
class SECTION;
class NODE;
class ELEMENT;
class ELEMENTSET;
class LOAD;
class DBC;
class Node;

#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

class NODESET: public ::xml_schema::type
{
  public:
  // LIST
  //
  typedef ::xml_schema::string LIST_type;
  typedef ::xsd::cxx::tree::optional< LIST_type > LIST_optional;
  typedef ::xsd::cxx::tree::traits< LIST_type, char > LIST_traits;

  const LIST_optional&
  LIST () const;

  LIST_optional&
  LIST ();

  void
  LIST (const LIST_type& x);

  void
  LIST (const LIST_optional& x);

  void
  LIST (::std::auto_ptr< LIST_type > p);

  // Name
  //
  typedef ::xml_schema::string Name_type;
  typedef ::xsd::cxx::tree::optional< Name_type > Name_optional;
  typedef ::xsd::cxx::tree::traits< Name_type, char > Name_traits;

  const Name_optional&
  Name () const;

  Name_optional&
  Name ();

  void
  Name (const Name_type& x);

  void
  Name (const Name_optional& x);

  void
  Name (::std::auto_ptr< Name_type > p);

  // Constructors.
  //
  NODESET ();

  NODESET (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = xml_schema::flags::dont_validate,
           ::xml_schema::container* c = 0);

  NODESET (const NODESET& x,
           ::xml_schema::flags f = xml_schema::flags::dont_validate,
           ::xml_schema::container* c = 0);

  virtual NODESET*
  _clone (::xml_schema::flags f = xml_schema::flags::dont_validate,
          ::xml_schema::container* c = 0) const;

  NODESET&
  operator= (const NODESET& x);

  virtual 
  ~NODESET ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  LIST_optional LIST_;
  Name_optional Name_;
};

class REAL: public ::xml_schema::type
{
  public:
  // X
  //
  typedef ::xml_schema::string X_type;
  typedef ::xsd::cxx::tree::optional< X_type > X_optional;
  typedef ::xsd::cxx::tree::traits< X_type, char > X_traits;

  const X_optional&
  X () const;

  X_optional&
  X ();

  void
  X (const X_type& x);

  void
  X (const X_optional& x);

  void
  X (::std::auto_ptr< X_type > p);

  // Y
  //
  typedef ::xml_schema::string Y_type;
  typedef ::xsd::cxx::tree::optional< Y_type > Y_optional;
  typedef ::xsd::cxx::tree::traits< Y_type, char > Y_traits;

  const Y_optional&
  Y () const;

  Y_optional&
  Y ();

  void
  Y (const Y_type& x);

  void
  Y (const Y_optional& x);

  void
  Y (::std::auto_ptr< Y_type > p);

  // Z
  //
  typedef ::xml_schema::string Z_type;
  typedef ::xsd::cxx::tree::optional< Z_type > Z_optional;
  typedef ::xsd::cxx::tree::traits< Z_type, char > Z_traits;

  const Z_optional&
  Z () const;

  Z_optional&
  Z ();

  void
  Z (const Z_type& x);

  void
  Z (const Z_optional& x);

  void
  Z (::std::auto_ptr< Z_type > p);

  // Constructors.
  //
  REAL ();

  REAL (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f = xml_schema::flags::dont_validate,
        ::xml_schema::container* c = 0);

  REAL (const REAL& x,
        ::xml_schema::flags f = xml_schema::flags::dont_validate,
        ::xml_schema::container* c = 0);

  virtual REAL*
  _clone (::xml_schema::flags f = xml_schema::flags::dont_validate,
          ::xml_schema::container* c = 0) const;

  REAL&
  operator= (const REAL& x);

  virtual 
  ~REAL ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  X_optional X_;
  Y_optional Y_;
  Z_optional Z_;
};

class IMAGINARY: public ::xml_schema::type
{
  public:
  // X
  //
  typedef ::xml_schema::string X_type;
  typedef ::xsd::cxx::tree::optional< X_type > X_optional;
  typedef ::xsd::cxx::tree::traits< X_type, char > X_traits;

  const X_optional&
  X () const;

  X_optional&
  X ();

  void
  X (const X_type& x);

  void
  X (const X_optional& x);

  void
  X (::std::auto_ptr< X_type > p);

  // Y
  //
  typedef ::xml_schema::string Y_type;
  typedef ::xsd::cxx::tree::optional< Y_type > Y_optional;
  typedef ::xsd::cxx::tree::traits< Y_type, char > Y_traits;

  const Y_optional&
  Y () const;

  Y_optional&
  Y ();

  void
  Y (const Y_type& x);

  void
  Y (const Y_optional& x);

  void
  Y (::std::auto_ptr< Y_type > p);

  // Z
  //
  typedef ::xml_schema::string Z_type;
  typedef ::xsd::cxx::tree::optional< Z_type > Z_optional;
  typedef ::xsd::cxx::tree::traits< Z_type, char > Z_traits;

  const Z_optional&
  Z () const;

  Z_optional&
  Z ();

  void
  Z (const Z_type& x);

  void
  Z (const Z_optional& x);

  void
  Z (::std::auto_ptr< Z_type > p);

  // Constructors.
  //
  IMAGINARY ();

  IMAGINARY (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = xml_schema::flags::dont_validate,
             ::xml_schema::container* c = 0);

  IMAGINARY (const IMAGINARY& x,
             ::xml_schema::flags f = xml_schema::flags::dont_validate,
             ::xml_schema::container* c = 0);

  virtual IMAGINARY*
  _clone (::xml_schema::flags f = xml_schema::flags::dont_validate,
          ::xml_schema::container* c = 0) const;

  IMAGINARY&
  operator= (const IMAGINARY& x);

  virtual 
  ~IMAGINARY ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  X_optional X_;
  Y_optional Y_;
  Z_optional Z_;
};

class STACCATO_XML: public ::xml_schema::type
{
  public:
  // NODESET
  //
  typedef ::NODESET NODESET_type;
  typedef ::xsd::cxx::tree::sequence< NODESET_type > NODESET_sequence;
  typedef NODESET_sequence::iterator NODESET_iterator;
  typedef NODESET_sequence::const_iterator NODESET_const_iterator;
  typedef ::xsd::cxx::tree::traits< NODESET_type, char > NODESET_traits;

  const NODESET_sequence&
  NODESET () const;

  NODESET_sequence&
  NODESET ();

  void
  NODESET (const NODESET_sequence& s);

  // REAL
  //
  typedef ::REAL REAL_type;
  typedef ::xsd::cxx::tree::sequence< REAL_type > REAL_sequence;
  typedef REAL_sequence::iterator REAL_iterator;
  typedef REAL_sequence::const_iterator REAL_const_iterator;
  typedef ::xsd::cxx::tree::traits< REAL_type, char > REAL_traits;

  const REAL_sequence&
  REAL () const;

  REAL_sequence&
  REAL ();

  void
  REAL (const REAL_sequence& s);

  // IMAGINARY
  //
  typedef ::IMAGINARY IMAGINARY_type;
  typedef ::xsd::cxx::tree::sequence< IMAGINARY_type > IMAGINARY_sequence;
  typedef IMAGINARY_sequence::iterator IMAGINARY_iterator;
  typedef IMAGINARY_sequence::const_iterator IMAGINARY_const_iterator;
  typedef ::xsd::cxx::tree::traits< IMAGINARY_type, char > IMAGINARY_traits;

  const IMAGINARY_sequence&
  IMAGINARY () const;

  IMAGINARY_sequence&
  IMAGINARY ();

  void
  IMAGINARY (const IMAGINARY_sequence& s);

  // ANALYSIS
  //
  typedef ::ANALYSIS ANALYSIS_type;
  typedef ::xsd::cxx::tree::sequence< ANALYSIS_type > ANALYSIS_sequence;
  typedef ANALYSIS_sequence::iterator ANALYSIS_iterator;
  typedef ANALYSIS_sequence::const_iterator ANALYSIS_const_iterator;
  typedef ::xsd::cxx::tree::traits< ANALYSIS_type, char > ANALYSIS_traits;

  const ANALYSIS_sequence&
  ANALYSIS () const;

  ANALYSIS_sequence&
  ANALYSIS ();

  void
  ANALYSIS (const ANALYSIS_sequence& s);

  // FREQUENCY
  //
  typedef ::FREQUENCY FREQUENCY_type;
  typedef ::xsd::cxx::tree::sequence< FREQUENCY_type > FREQUENCY_sequence;
  typedef FREQUENCY_sequence::iterator FREQUENCY_iterator;
  typedef FREQUENCY_sequence::const_iterator FREQUENCY_const_iterator;
  typedef ::xsd::cxx::tree::traits< FREQUENCY_type, char > FREQUENCY_traits;

  const FREQUENCY_sequence&
  FREQUENCY () const;

  FREQUENCY_sequence&
  FREQUENCY ();

  void
  FREQUENCY (const FREQUENCY_sequence& s);

  // MATERIALS
  //
  typedef ::MATERIALS MATERIALS_type;
  typedef ::xsd::cxx::tree::sequence< MATERIALS_type > MATERIALS_sequence;
  typedef MATERIALS_sequence::iterator MATERIALS_iterator;
  typedef MATERIALS_sequence::const_iterator MATERIALS_const_iterator;
  typedef ::xsd::cxx::tree::traits< MATERIALS_type, char > MATERIALS_traits;

  const MATERIALS_sequence&
  MATERIALS () const;

  MATERIALS_sequence&
  MATERIALS ();

  void
  MATERIALS (const MATERIALS_sequence& s);

  // SECTIONS
  //
  typedef ::SECTIONS SECTIONS_type;
  typedef ::xsd::cxx::tree::sequence< SECTIONS_type > SECTIONS_sequence;
  typedef SECTIONS_sequence::iterator SECTIONS_iterator;
  typedef SECTIONS_sequence::const_iterator SECTIONS_const_iterator;
  typedef ::xsd::cxx::tree::traits< SECTIONS_type, char > SECTIONS_traits;

  const SECTIONS_sequence&
  SECTIONS () const;

  SECTIONS_sequence&
  SECTIONS ();

  void
  SECTIONS (const SECTIONS_sequence& s);

  // NODES
  //
  typedef ::NODES NODES_type;
  typedef ::xsd::cxx::tree::sequence< NODES_type > NODES_sequence;
  typedef NODES_sequence::iterator NODES_iterator;
  typedef NODES_sequence::const_iterator NODES_const_iterator;
  typedef ::xsd::cxx::tree::traits< NODES_type, char > NODES_traits;

  const NODES_sequence&
  NODES () const;

  NODES_sequence&
  NODES ();

  void
  NODES (const NODES_sequence& s);

  // ELEMENTS
  //
  typedef ::ELEMENTS ELEMENTS_type;
  typedef ::xsd::cxx::tree::sequence< ELEMENTS_type > ELEMENTS_sequence;
  typedef ELEMENTS_sequence::iterator ELEMENTS_iterator;
  typedef ELEMENTS_sequence::const_iterator ELEMENTS_const_iterator;
  typedef ::xsd::cxx::tree::traits< ELEMENTS_type, char > ELEMENTS_traits;

  const ELEMENTS_sequence&
  ELEMENTS () const;

  ELEMENTS_sequence&
  ELEMENTS ();

  void
  ELEMENTS (const ELEMENTS_sequence& s);

  // SETS
  //
  typedef ::SETS SETS_type;
  typedef ::xsd::cxx::tree::sequence< SETS_type > SETS_sequence;
  typedef SETS_sequence::iterator SETS_iterator;
  typedef SETS_sequence::const_iterator SETS_const_iterator;
  typedef ::xsd::cxx::tree::traits< SETS_type, char > SETS_traits;

  const SETS_sequence&
  SETS () const;

  SETS_sequence&
  SETS ();

  void
  SETS (const SETS_sequence& s);

  // LOADS
  //
  typedef ::LOADS LOADS_type;
  typedef ::xsd::cxx::tree::sequence< LOADS_type > LOADS_sequence;
  typedef LOADS_sequence::iterator LOADS_iterator;
  typedef LOADS_sequence::const_iterator LOADS_const_iterator;
  typedef ::xsd::cxx::tree::traits< LOADS_type, char > LOADS_traits;

  const LOADS_sequence&
  LOADS () const;

  LOADS_sequence&
  LOADS ();

  void
  LOADS (const LOADS_sequence& s);

  // BC
  //
  typedef ::BC BC_type;
  typedef ::xsd::cxx::tree::sequence< BC_type > BC_sequence;
  typedef BC_sequence::iterator BC_iterator;
  typedef BC_sequence::const_iterator BC_const_iterator;
  typedef ::xsd::cxx::tree::traits< BC_type, char > BC_traits;

  const BC_sequence&
  BC () const;

  BC_sequence&
  BC ();

  void
  BC (const BC_sequence& s);

  // Constructors.
  //
  STACCATO_XML ();

  STACCATO_XML (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = xml_schema::flags::dont_validate,
                ::xml_schema::container* c = 0);

  STACCATO_XML (const STACCATO_XML& x,
                ::xml_schema::flags f = xml_schema::flags::dont_validate,
                ::xml_schema::container* c = 0);

  virtual STACCATO_XML*
  _clone (::xml_schema::flags f = xml_schema::flags::dont_validate,
          ::xml_schema::container* c = 0) const;

  STACCATO_XML&
  operator= (const STACCATO_XML& x);

  virtual 
  ~STACCATO_XML ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  NODESET_sequence NODESET_;
  REAL_sequence REAL_;
  IMAGINARY_sequence IMAGINARY_;
  ANALYSIS_sequence ANALYSIS_;
  FREQUENCY_sequence FREQUENCY_;
  MATERIALS_sequence MATERIALS_;
  SECTIONS_sequence SECTIONS_;
  NODES_sequence NODES_;
  ELEMENTS_sequence ELEMENTS_;
  SETS_sequence SETS_;
  LOADS_sequence LOADS_;
  BC_sequence BC_;
};

class ANALYSIS: public ::xml_schema::type
{
  public:
  // NAME
  //
  typedef ::xml_schema::string NAME_type;
  typedef ::xsd::cxx::tree::optional< NAME_type > NAME_optional;
  typedef ::xsd::cxx::tree::traits< NAME_type, char > NAME_traits;

  const NAME_optional&
  NAME () const;

  NAME_optional&
  NAME ();

  void
  NAME (const NAME_type& x);

  void
  NAME (const NAME_optional& x);

  void
  NAME (::std::auto_ptr< NAME_type > p);

  // TYPE
  //
  typedef ::xml_schema::string TYPE_type;
  typedef ::xsd::cxx::tree::optional< TYPE_type > TYPE_optional;
  typedef ::xsd::cxx::tree::traits< TYPE_type, char > TYPE_traits;

  const TYPE_optional&
  TYPE () const;

  TYPE_optional&
  TYPE ();

  void
  TYPE (const TYPE_type& x);

  void
  TYPE (const TYPE_optional& x);

  void
  TYPE (::std::auto_ptr< TYPE_type > p);

  // Constructors.
  //
  ANALYSIS ();

  ANALYSIS (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = xml_schema::flags::dont_validate,
            ::xml_schema::container* c = 0);

  ANALYSIS (const ANALYSIS& x,
            ::xml_schema::flags f = xml_schema::flags::dont_validate,
            ::xml_schema::container* c = 0);

  virtual ANALYSIS*
  _clone (::xml_schema::flags f = xml_schema::flags::dont_validate,
          ::xml_schema::container* c = 0) const;

  ANALYSIS&
  operator= (const ANALYSIS& x);

  virtual 
  ~ANALYSIS ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  NAME_optional NAME_;
  TYPE_optional TYPE_;
};

class FREQUENCY: public ::xml_schema::type
{
  public:
  // START_FREQ
  //
  typedef ::xml_schema::string START_FREQ_type;
  typedef ::xsd::cxx::tree::optional< START_FREQ_type > START_FREQ_optional;
  typedef ::xsd::cxx::tree::traits< START_FREQ_type, char > START_FREQ_traits;

  const START_FREQ_optional&
  START_FREQ () const;

  START_FREQ_optional&
  START_FREQ ();

  void
  START_FREQ (const START_FREQ_type& x);

  void
  START_FREQ (const START_FREQ_optional& x);

  void
  START_FREQ (::std::auto_ptr< START_FREQ_type > p);

  // END_FREQ
  //
  typedef ::xml_schema::string END_FREQ_type;
  typedef ::xsd::cxx::tree::optional< END_FREQ_type > END_FREQ_optional;
  typedef ::xsd::cxx::tree::traits< END_FREQ_type, char > END_FREQ_traits;

  const END_FREQ_optional&
  END_FREQ () const;

  END_FREQ_optional&
  END_FREQ ();

  void
  END_FREQ (const END_FREQ_type& x);

  void
  END_FREQ (const END_FREQ_optional& x);

  void
  END_FREQ (::std::auto_ptr< END_FREQ_type > p);

  // STEP_FREQ
  //
  typedef ::xml_schema::string STEP_FREQ_type;
  typedef ::xsd::cxx::tree::optional< STEP_FREQ_type > STEP_FREQ_optional;
  typedef ::xsd::cxx::tree::traits< STEP_FREQ_type, char > STEP_FREQ_traits;

  const STEP_FREQ_optional&
  STEP_FREQ () const;

  STEP_FREQ_optional&
  STEP_FREQ ();

  void
  STEP_FREQ (const STEP_FREQ_type& x);

  void
  STEP_FREQ (const STEP_FREQ_optional& x);

  void
  STEP_FREQ (::std::auto_ptr< STEP_FREQ_type > p);

  // Type
  //
  typedef ::xml_schema::string Type_type;
  typedef ::xsd::cxx::tree::optional< Type_type > Type_optional;
  typedef ::xsd::cxx::tree::traits< Type_type, char > Type_traits;

  const Type_optional&
  Type () const;

  Type_optional&
  Type ();

  void
  Type (const Type_type& x);

  void
  Type (const Type_optional& x);

  void
  Type (::std::auto_ptr< Type_type > p);

  // Constructors.
  //
  FREQUENCY ();

  FREQUENCY (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = xml_schema::flags::dont_validate,
             ::xml_schema::container* c = 0);

  FREQUENCY (const FREQUENCY& x,
             ::xml_schema::flags f = xml_schema::flags::dont_validate,
             ::xml_schema::container* c = 0);

  virtual FREQUENCY*
  _clone (::xml_schema::flags f = xml_schema::flags::dont_validate,
          ::xml_schema::container* c = 0) const;

  FREQUENCY&
  operator= (const FREQUENCY& x);

  virtual 
  ~FREQUENCY ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  START_FREQ_optional START_FREQ_;
  END_FREQ_optional END_FREQ_;
  STEP_FREQ_optional STEP_FREQ_;
  Type_optional Type_;
};

class MATERIALS: public ::xml_schema::type
{
  public:
  // MATERIAL
  //
  typedef ::MATERIAL MATERIAL_type;
  typedef ::xsd::cxx::tree::sequence< MATERIAL_type > MATERIAL_sequence;
  typedef MATERIAL_sequence::iterator MATERIAL_iterator;
  typedef MATERIAL_sequence::const_iterator MATERIAL_const_iterator;
  typedef ::xsd::cxx::tree::traits< MATERIAL_type, char > MATERIAL_traits;

  const MATERIAL_sequence&
  MATERIAL () const;

  MATERIAL_sequence&
  MATERIAL ();

  void
  MATERIAL (const MATERIAL_sequence& s);

  // Constructors.
  //
  MATERIALS ();

  MATERIALS (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = xml_schema::flags::dont_validate,
             ::xml_schema::container* c = 0);

  MATERIALS (const MATERIALS& x,
             ::xml_schema::flags f = xml_schema::flags::dont_validate,
             ::xml_schema::container* c = 0);

  virtual MATERIALS*
  _clone (::xml_schema::flags f = xml_schema::flags::dont_validate,
          ::xml_schema::container* c = 0) const;

  MATERIALS&
  operator= (const MATERIALS& x);

  virtual 
  ~MATERIALS ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  MATERIAL_sequence MATERIAL_;
};

class SECTIONS: public ::xml_schema::type
{
  public:
  // SECTION
  //
  typedef ::SECTION SECTION_type;
  typedef ::xsd::cxx::tree::sequence< SECTION_type > SECTION_sequence;
  typedef SECTION_sequence::iterator SECTION_iterator;
  typedef SECTION_sequence::const_iterator SECTION_const_iterator;
  typedef ::xsd::cxx::tree::traits< SECTION_type, char > SECTION_traits;

  const SECTION_sequence&
  SECTION () const;

  SECTION_sequence&
  SECTION ();

  void
  SECTION (const SECTION_sequence& s);

  // Constructors.
  //
  SECTIONS ();

  SECTIONS (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = xml_schema::flags::dont_validate,
            ::xml_schema::container* c = 0);

  SECTIONS (const SECTIONS& x,
            ::xml_schema::flags f = xml_schema::flags::dont_validate,
            ::xml_schema::container* c = 0);

  virtual SECTIONS*
  _clone (::xml_schema::flags f = xml_schema::flags::dont_validate,
          ::xml_schema::container* c = 0) const;

  SECTIONS&
  operator= (const SECTIONS& x);

  virtual 
  ~SECTIONS ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  SECTION_sequence SECTION_;
};

class NODES: public ::xml_schema::type
{
  public:
  // NODE
  //
  typedef ::NODE NODE_type;
  typedef ::xsd::cxx::tree::sequence< NODE_type > NODE_sequence;
  typedef NODE_sequence::iterator NODE_iterator;
  typedef NODE_sequence::const_iterator NODE_const_iterator;
  typedef ::xsd::cxx::tree::traits< NODE_type, char > NODE_traits;

  const NODE_sequence&
  NODE () const;

  NODE_sequence&
  NODE ();

  void
  NODE (const NODE_sequence& s);

  // Constructors.
  //
  NODES ();

  NODES (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f = xml_schema::flags::dont_validate,
         ::xml_schema::container* c = 0);

  NODES (const NODES& x,
         ::xml_schema::flags f = xml_schema::flags::dont_validate,
         ::xml_schema::container* c = 0);

  virtual NODES*
  _clone (::xml_schema::flags f = xml_schema::flags::dont_validate,
          ::xml_schema::container* c = 0) const;

  NODES&
  operator= (const NODES& x);

  virtual 
  ~NODES ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  NODE_sequence NODE_;
};

class ELEMENTS: public ::xml_schema::type
{
  public:
  // ELEMENT
  //
  typedef ::ELEMENT ELEMENT_type;
  typedef ::xsd::cxx::tree::sequence< ELEMENT_type > ELEMENT_sequence;
  typedef ELEMENT_sequence::iterator ELEMENT_iterator;
  typedef ELEMENT_sequence::const_iterator ELEMENT_const_iterator;
  typedef ::xsd::cxx::tree::traits< ELEMENT_type, char > ELEMENT_traits;

  const ELEMENT_sequence&
  ELEMENT () const;

  ELEMENT_sequence&
  ELEMENT ();

  void
  ELEMENT (const ELEMENT_sequence& s);

  // Constructors.
  //
  ELEMENTS ();

  ELEMENTS (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = xml_schema::flags::dont_validate,
            ::xml_schema::container* c = 0);

  ELEMENTS (const ELEMENTS& x,
            ::xml_schema::flags f = xml_schema::flags::dont_validate,
            ::xml_schema::container* c = 0);

  virtual ELEMENTS*
  _clone (::xml_schema::flags f = xml_schema::flags::dont_validate,
          ::xml_schema::container* c = 0) const;

  ELEMENTS&
  operator= (const ELEMENTS& x);

  virtual 
  ~ELEMENTS ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ELEMENT_sequence ELEMENT_;
};

class SETS: public ::xml_schema::type
{
  public:
  // ELEMENTSET
  //
  typedef ::ELEMENTSET ELEMENTSET_type;
  typedef ::xsd::cxx::tree::sequence< ELEMENTSET_type > ELEMENTSET_sequence;
  typedef ELEMENTSET_sequence::iterator ELEMENTSET_iterator;
  typedef ELEMENTSET_sequence::const_iterator ELEMENTSET_const_iterator;
  typedef ::xsd::cxx::tree::traits< ELEMENTSET_type, char > ELEMENTSET_traits;

  const ELEMENTSET_sequence&
  ELEMENTSET () const;

  ELEMENTSET_sequence&
  ELEMENTSET ();

  void
  ELEMENTSET (const ELEMENTSET_sequence& s);

  // NODESET
  //
  typedef ::NODESET NODESET_type;
  typedef ::xsd::cxx::tree::sequence< NODESET_type > NODESET_sequence;
  typedef NODESET_sequence::iterator NODESET_iterator;
  typedef NODESET_sequence::const_iterator NODESET_const_iterator;
  typedef ::xsd::cxx::tree::traits< NODESET_type, char > NODESET_traits;

  const NODESET_sequence&
  NODESET () const;

  NODESET_sequence&
  NODESET ();

  void
  NODESET (const NODESET_sequence& s);

  // Constructors.
  //
  SETS ();

  SETS (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f = xml_schema::flags::dont_validate,
        ::xml_schema::container* c = 0);

  SETS (const SETS& x,
        ::xml_schema::flags f = xml_schema::flags::dont_validate,
        ::xml_schema::container* c = 0);

  virtual SETS*
  _clone (::xml_schema::flags f = xml_schema::flags::dont_validate,
          ::xml_schema::container* c = 0) const;

  SETS&
  operator= (const SETS& x);

  virtual 
  ~SETS ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ELEMENTSET_sequence ELEMENTSET_;
  NODESET_sequence NODESET_;
};

class LOADS: public ::xml_schema::type
{
  public:
  // LOAD
  //
  typedef ::LOAD LOAD_type;
  typedef ::xsd::cxx::tree::sequence< LOAD_type > LOAD_sequence;
  typedef LOAD_sequence::iterator LOAD_iterator;
  typedef LOAD_sequence::const_iterator LOAD_const_iterator;
  typedef ::xsd::cxx::tree::traits< LOAD_type, char > LOAD_traits;

  const LOAD_sequence&
  LOAD () const;

  LOAD_sequence&
  LOAD ();

  void
  LOAD (const LOAD_sequence& s);

  // Constructors.
  //
  LOADS ();

  LOADS (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f = xml_schema::flags::dont_validate,
         ::xml_schema::container* c = 0);

  LOADS (const LOADS& x,
         ::xml_schema::flags f = xml_schema::flags::dont_validate,
         ::xml_schema::container* c = 0);

  virtual LOADS*
  _clone (::xml_schema::flags f = xml_schema::flags::dont_validate,
          ::xml_schema::container* c = 0) const;

  LOADS&
  operator= (const LOADS& x);

  virtual 
  ~LOADS ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  LOAD_sequence LOAD_;
};

class BC: public ::xml_schema::type
{
  public:
  // DBC
  //
  typedef ::DBC DBC_type;
  typedef ::xsd::cxx::tree::sequence< DBC_type > DBC_sequence;
  typedef DBC_sequence::iterator DBC_iterator;
  typedef DBC_sequence::const_iterator DBC_const_iterator;
  typedef ::xsd::cxx::tree::traits< DBC_type, char > DBC_traits;

  const DBC_sequence&
  DBC () const;

  DBC_sequence&
  DBC ();

  void
  DBC (const DBC_sequence& s);

  // Constructors.
  //
  BC ();

  BC (const ::xercesc::DOMElement& e,
      ::xml_schema::flags f = xml_schema::flags::dont_validate,
      ::xml_schema::container* c = 0);

  BC (const BC& x,
      ::xml_schema::flags f = xml_schema::flags::dont_validate,
      ::xml_schema::container* c = 0);

  virtual BC*
  _clone (::xml_schema::flags f = xml_schema::flags::dont_validate,
          ::xml_schema::container* c = 0) const;

  BC&
  operator= (const BC& x);

  virtual 
  ~BC ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  DBC_sequence DBC_;
};

class MATERIAL: public ::xml_schema::type
{
  public:
  // E
  //
  typedef ::xml_schema::string E_type;
  typedef ::xsd::cxx::tree::optional< E_type > E_optional;
  typedef ::xsd::cxx::tree::traits< E_type, char > E_traits;

  const E_optional&
  E () const;

  E_optional&
  E ();

  void
  E (const E_type& x);

  void
  E (const E_optional& x);

  void
  E (::std::auto_ptr< E_type > p);

  // nu
  //
  typedef ::xml_schema::string nu_type;
  typedef ::xsd::cxx::tree::optional< nu_type > nu_optional;
  typedef ::xsd::cxx::tree::traits< nu_type, char > nu_traits;

  const nu_optional&
  nu () const;

  nu_optional&
  nu ();

  void
  nu (const nu_type& x);

  void
  nu (const nu_optional& x);

  void
  nu (::std::auto_ptr< nu_type > p);

  // rho
  //
  typedef ::xml_schema::string rho_type;
  typedef ::xsd::cxx::tree::optional< rho_type > rho_optional;
  typedef ::xsd::cxx::tree::traits< rho_type, char > rho_traits;

  const rho_optional&
  rho () const;

  rho_optional&
  rho ();

  void
  rho (const rho_type& x);

  void
  rho (const rho_optional& x);

  void
  rho (::std::auto_ptr< rho_type > p);

  // eta
  //
  typedef ::xml_schema::string eta_type;
  typedef ::xsd::cxx::tree::optional< eta_type > eta_optional;
  typedef ::xsd::cxx::tree::traits< eta_type, char > eta_traits;

  const eta_optional&
  eta () const;

  eta_optional&
  eta ();

  void
  eta (const eta_type& x);

  void
  eta (const eta_optional& x);

  void
  eta (::std::auto_ptr< eta_type > p);

  // Name
  //
  typedef ::xml_schema::string Name_type;
  typedef ::xsd::cxx::tree::optional< Name_type > Name_optional;
  typedef ::xsd::cxx::tree::traits< Name_type, char > Name_traits;

  const Name_optional&
  Name () const;

  Name_optional&
  Name ();

  void
  Name (const Name_type& x);

  void
  Name (const Name_optional& x);

  void
  Name (::std::auto_ptr< Name_type > p);

  // Type
  //
  typedef ::xml_schema::string Type_type;
  typedef ::xsd::cxx::tree::optional< Type_type > Type_optional;
  typedef ::xsd::cxx::tree::traits< Type_type, char > Type_traits;

  const Type_optional&
  Type () const;

  Type_optional&
  Type ();

  void
  Type (const Type_type& x);

  void
  Type (const Type_optional& x);

  void
  Type (::std::auto_ptr< Type_type > p);

  // Constructors.
  //
  MATERIAL ();

  MATERIAL (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = xml_schema::flags::dont_validate,
            ::xml_schema::container* c = 0);

  MATERIAL (const MATERIAL& x,
            ::xml_schema::flags f = xml_schema::flags::dont_validate,
            ::xml_schema::container* c = 0);

  virtual MATERIAL*
  _clone (::xml_schema::flags f = xml_schema::flags::dont_validate,
          ::xml_schema::container* c = 0) const;

  MATERIAL&
  operator= (const MATERIAL& x);

  virtual 
  ~MATERIAL ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  E_optional E_;
  nu_optional nu_;
  rho_optional rho_;
  eta_optional eta_;
  Name_optional Name_;
  Type_optional Type_;
};

class SECTION: public ::xml_schema::type
{
  public:
  // ELEMENTSET
  //
  typedef ::xml_schema::string ELEMENTSET_type;
  typedef ::xsd::cxx::tree::optional< ELEMENTSET_type > ELEMENTSET_optional;
  typedef ::xsd::cxx::tree::traits< ELEMENTSET_type, char > ELEMENTSET_traits;

  const ELEMENTSET_optional&
  ELEMENTSET () const;

  ELEMENTSET_optional&
  ELEMENTSET ();

  void
  ELEMENTSET (const ELEMENTSET_type& x);

  void
  ELEMENTSET (const ELEMENTSET_optional& x);

  void
  ELEMENTSET (::std::auto_ptr< ELEMENTSET_type > p);

  // MATERIAL
  //
  typedef ::xml_schema::string MATERIAL_type;
  typedef ::xsd::cxx::tree::optional< MATERIAL_type > MATERIAL_optional;
  typedef ::xsd::cxx::tree::traits< MATERIAL_type, char > MATERIAL_traits;

  const MATERIAL_optional&
  MATERIAL () const;

  MATERIAL_optional&
  MATERIAL ();

  void
  MATERIAL (const MATERIAL_type& x);

  void
  MATERIAL (const MATERIAL_optional& x);

  void
  MATERIAL (::std::auto_ptr< MATERIAL_type > p);

  // Name
  //
  typedef ::xml_schema::string Name_type;
  typedef ::xsd::cxx::tree::optional< Name_type > Name_optional;
  typedef ::xsd::cxx::tree::traits< Name_type, char > Name_traits;

  const Name_optional&
  Name () const;

  Name_optional&
  Name ();

  void
  Name (const Name_type& x);

  void
  Name (const Name_optional& x);

  void
  Name (::std::auto_ptr< Name_type > p);

  // Constructors.
  //
  SECTION ();

  SECTION (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = xml_schema::flags::dont_validate,
           ::xml_schema::container* c = 0);

  SECTION (const SECTION& x,
           ::xml_schema::flags f = xml_schema::flags::dont_validate,
           ::xml_schema::container* c = 0);

  virtual SECTION*
  _clone (::xml_schema::flags f = xml_schema::flags::dont_validate,
          ::xml_schema::container* c = 0) const;

  SECTION&
  operator= (const SECTION& x);

  virtual 
  ~SECTION ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ELEMENTSET_optional ELEMENTSET_;
  MATERIAL_optional MATERIAL_;
  Name_optional Name_;
};

class NODE: public ::xml_schema::type
{
  public:
  // ID
  //
  typedef ::xml_schema::string ID_type;
  typedef ::xsd::cxx::tree::optional< ID_type > ID_optional;
  typedef ::xsd::cxx::tree::traits< ID_type, char > ID_traits;

  const ID_optional&
  ID () const;

  ID_optional&
  ID ();

  void
  ID (const ID_type& x);

  void
  ID (const ID_optional& x);

  void
  ID (::std::auto_ptr< ID_type > p);

  // X
  //
  typedef ::xml_schema::string X_type;
  typedef ::xsd::cxx::tree::optional< X_type > X_optional;
  typedef ::xsd::cxx::tree::traits< X_type, char > X_traits;

  const X_optional&
  X () const;

  X_optional&
  X ();

  void
  X (const X_type& x);

  void
  X (const X_optional& x);

  void
  X (::std::auto_ptr< X_type > p);

  // Y
  //
  typedef ::xml_schema::string Y_type;
  typedef ::xsd::cxx::tree::optional< Y_type > Y_optional;
  typedef ::xsd::cxx::tree::traits< Y_type, char > Y_traits;

  const Y_optional&
  Y () const;

  Y_optional&
  Y ();

  void
  Y (const Y_type& x);

  void
  Y (const Y_optional& x);

  void
  Y (::std::auto_ptr< Y_type > p);

  // Z
  //
  typedef ::xml_schema::string Z_type;
  typedef ::xsd::cxx::tree::optional< Z_type > Z_optional;
  typedef ::xsd::cxx::tree::traits< Z_type, char > Z_traits;

  const Z_optional&
  Z () const;

  Z_optional&
  Z ();

  void
  Z (const Z_type& x);

  void
  Z (const Z_optional& x);

  void
  Z (::std::auto_ptr< Z_type > p);

  // Constructors.
  //
  NODE ();

  NODE (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f = xml_schema::flags::dont_validate,
        ::xml_schema::container* c = 0);

  NODE (const NODE& x,
        ::xml_schema::flags f = xml_schema::flags::dont_validate,
        ::xml_schema::container* c = 0);

  virtual NODE*
  _clone (::xml_schema::flags f = xml_schema::flags::dont_validate,
          ::xml_schema::container* c = 0) const;

  NODE&
  operator= (const NODE& x);

  virtual 
  ~NODE ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ID_optional ID_;
  X_optional X_;
  Y_optional Y_;
  Z_optional Z_;
};

class ELEMENT: public ::xml_schema::type
{
  public:
  // ID
  //
  typedef ::xml_schema::string ID_type;
  typedef ::xsd::cxx::tree::optional< ID_type > ID_optional;
  typedef ::xsd::cxx::tree::traits< ID_type, char > ID_traits;

  const ID_optional&
  ID () const;

  ID_optional&
  ID ();

  void
  ID (const ID_type& x);

  void
  ID (const ID_optional& x);

  void
  ID (::std::auto_ptr< ID_type > p);

  // NODECONNECT
  //
  typedef ::xml_schema::string NODECONNECT_type;
  typedef ::xsd::cxx::tree::optional< NODECONNECT_type > NODECONNECT_optional;
  typedef ::xsd::cxx::tree::traits< NODECONNECT_type, char > NODECONNECT_traits;

  const NODECONNECT_optional&
  NODECONNECT () const;

  NODECONNECT_optional&
  NODECONNECT ();

  void
  NODECONNECT (const NODECONNECT_type& x);

  void
  NODECONNECT (const NODECONNECT_optional& x);

  void
  NODECONNECT (::std::auto_ptr< NODECONNECT_type > p);

  // Type
  //
  typedef ::xml_schema::string Type_type;
  typedef ::xsd::cxx::tree::optional< Type_type > Type_optional;
  typedef ::xsd::cxx::tree::traits< Type_type, char > Type_traits;

  const Type_optional&
  Type () const;

  Type_optional&
  Type ();

  void
  Type (const Type_type& x);

  void
  Type (const Type_optional& x);

  void
  Type (::std::auto_ptr< Type_type > p);

  // Constructors.
  //
  ELEMENT ();

  ELEMENT (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = xml_schema::flags::dont_validate,
           ::xml_schema::container* c = 0);

  ELEMENT (const ELEMENT& x,
           ::xml_schema::flags f = xml_schema::flags::dont_validate,
           ::xml_schema::container* c = 0);

  virtual ELEMENT*
  _clone (::xml_schema::flags f = xml_schema::flags::dont_validate,
          ::xml_schema::container* c = 0) const;

  ELEMENT&
  operator= (const ELEMENT& x);

  virtual 
  ~ELEMENT ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ID_optional ID_;
  NODECONNECT_optional NODECONNECT_;
  Type_optional Type_;
};

class ELEMENTSET: public ::xml_schema::type
{
  public:
  // LIST
  //
  typedef ::xml_schema::string LIST_type;
  typedef ::xsd::cxx::tree::optional< LIST_type > LIST_optional;
  typedef ::xsd::cxx::tree::traits< LIST_type, char > LIST_traits;

  const LIST_optional&
  LIST () const;

  LIST_optional&
  LIST ();

  void
  LIST (const LIST_type& x);

  void
  LIST (const LIST_optional& x);

  void
  LIST (::std::auto_ptr< LIST_type > p);

  // Name
  //
  typedef ::xml_schema::string Name_type;
  typedef ::xsd::cxx::tree::optional< Name_type > Name_optional;
  typedef ::xsd::cxx::tree::traits< Name_type, char > Name_traits;

  const Name_optional&
  Name () const;

  Name_optional&
  Name ();

  void
  Name (const Name_type& x);

  void
  Name (const Name_optional& x);

  void
  Name (::std::auto_ptr< Name_type > p);

  // Constructors.
  //
  ELEMENTSET ();

  ELEMENTSET (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = xml_schema::flags::dont_validate,
              ::xml_schema::container* c = 0);

  ELEMENTSET (const ELEMENTSET& x,
              ::xml_schema::flags f = xml_schema::flags::dont_validate,
              ::xml_schema::container* c = 0);

  virtual ELEMENTSET*
  _clone (::xml_schema::flags f = xml_schema::flags::dont_validate,
          ::xml_schema::container* c = 0) const;

  ELEMENTSET&
  operator= (const ELEMENTSET& x);

  virtual 
  ~ELEMENTSET ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  LIST_optional LIST_;
  Name_optional Name_;
};

class LOAD: public ::xml_schema::type
{
  public:
  // Node
  //
  typedef ::Node Node_type;
  typedef ::xsd::cxx::tree::sequence< Node_type > Node_sequence;
  typedef Node_sequence::iterator Node_iterator;
  typedef Node_sequence::const_iterator Node_const_iterator;
  typedef ::xsd::cxx::tree::traits< Node_type, char > Node_traits;

  const Node_sequence&
  Node () const;

  Node_sequence&
  Node ();

  void
  Node (const Node_sequence& s);

  // REAL
  //
  typedef ::REAL REAL_type;
  typedef ::xsd::cxx::tree::sequence< REAL_type > REAL_sequence;
  typedef REAL_sequence::iterator REAL_iterator;
  typedef REAL_sequence::const_iterator REAL_const_iterator;
  typedef ::xsd::cxx::tree::traits< REAL_type, char > REAL_traits;

  const REAL_sequence&
  REAL () const;

  REAL_sequence&
  REAL ();

  void
  REAL (const REAL_sequence& s);

  // IMAGINARY
  //
  typedef ::IMAGINARY IMAGINARY_type;
  typedef ::xsd::cxx::tree::sequence< IMAGINARY_type > IMAGINARY_sequence;
  typedef IMAGINARY_sequence::iterator IMAGINARY_iterator;
  typedef IMAGINARY_sequence::const_iterator IMAGINARY_const_iterator;
  typedef ::xsd::cxx::tree::traits< IMAGINARY_type, char > IMAGINARY_traits;

  const IMAGINARY_sequence&
  IMAGINARY () const;

  IMAGINARY_sequence&
  IMAGINARY ();

  void
  IMAGINARY (const IMAGINARY_sequence& s);

  // Type
  //
  typedef ::xml_schema::string Type_type;
  typedef ::xsd::cxx::tree::optional< Type_type > Type_optional;
  typedef ::xsd::cxx::tree::traits< Type_type, char > Type_traits;

  const Type_optional&
  Type () const;

  Type_optional&
  Type ();

  void
  Type (const Type_type& x);

  void
  Type (const Type_optional& x);

  void
  Type (::std::auto_ptr< Type_type > p);

  // Constructors.
  //
  LOAD ();

  LOAD (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f = xml_schema::flags::dont_validate,
        ::xml_schema::container* c = 0);

  LOAD (const LOAD& x,
        ::xml_schema::flags f = xml_schema::flags::dont_validate,
        ::xml_schema::container* c = 0);

  virtual LOAD*
  _clone (::xml_schema::flags f = xml_schema::flags::dont_validate,
          ::xml_schema::container* c = 0) const;

  LOAD&
  operator= (const LOAD& x);

  virtual 
  ~LOAD ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  Node_sequence Node_;
  REAL_sequence REAL_;
  IMAGINARY_sequence IMAGINARY_;
  Type_optional Type_;
};

class DBC: public ::xml_schema::type
{
  public:
  // NODESET
  //
  typedef ::NODESET NODESET_type;
  typedef ::xsd::cxx::tree::sequence< NODESET_type > NODESET_sequence;
  typedef NODESET_sequence::iterator NODESET_iterator;
  typedef NODESET_sequence::const_iterator NODESET_const_iterator;
  typedef ::xsd::cxx::tree::traits< NODESET_type, char > NODESET_traits;

  const NODESET_sequence&
  NODESET () const;

  NODESET_sequence&
  NODESET ();

  void
  NODESET (const NODESET_sequence& s);

  // REAL
  //
  typedef ::REAL REAL_type;
  typedef ::xsd::cxx::tree::sequence< REAL_type > REAL_sequence;
  typedef REAL_sequence::iterator REAL_iterator;
  typedef REAL_sequence::const_iterator REAL_const_iterator;
  typedef ::xsd::cxx::tree::traits< REAL_type, char > REAL_traits;

  const REAL_sequence&
  REAL () const;

  REAL_sequence&
  REAL ();

  void
  REAL (const REAL_sequence& s);

  // IMAGINARY
  //
  typedef ::IMAGINARY IMAGINARY_type;
  typedef ::xsd::cxx::tree::sequence< IMAGINARY_type > IMAGINARY_sequence;
  typedef IMAGINARY_sequence::iterator IMAGINARY_iterator;
  typedef IMAGINARY_sequence::const_iterator IMAGINARY_const_iterator;
  typedef ::xsd::cxx::tree::traits< IMAGINARY_type, char > IMAGINARY_traits;

  const IMAGINARY_sequence&
  IMAGINARY () const;

  IMAGINARY_sequence&
  IMAGINARY ();

  void
  IMAGINARY (const IMAGINARY_sequence& s);

  // Constructors.
  //
  DBC ();

  DBC (const ::xercesc::DOMElement& e,
       ::xml_schema::flags f = xml_schema::flags::dont_validate,
       ::xml_schema::container* c = 0);

  DBC (const DBC& x,
       ::xml_schema::flags f = xml_schema::flags::dont_validate,
       ::xml_schema::container* c = 0);

  virtual DBC*
  _clone (::xml_schema::flags f = xml_schema::flags::dont_validate,
          ::xml_schema::container* c = 0) const;

  DBC&
  operator= (const DBC& x);

  virtual 
  ~DBC ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  NODESET_sequence NODESET_;
  REAL_sequence REAL_;
  IMAGINARY_sequence IMAGINARY_;
};

class Node: public ::xml_schema::type
{
  public:
  // ID
  //
  typedef ::xml_schema::string ID_type;
  typedef ::xsd::cxx::tree::optional< ID_type > ID_optional;
  typedef ::xsd::cxx::tree::traits< ID_type, char > ID_traits;

  const ID_optional&
  ID () const;

  ID_optional&
  ID ();

  void
  ID (const ID_type& x);

  void
  ID (const ID_optional& x);

  void
  ID (::std::auto_ptr< ID_type > p);

  // Constructors.
  //
  Node ();

  Node (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f = xml_schema::flags::dont_validate,
        ::xml_schema::container* c = 0);

  Node (const Node& x,
        ::xml_schema::flags f = xml_schema::flags::dont_validate,
        ::xml_schema::container* c = 0);

  virtual Node*
  _clone (::xml_schema::flags f = xml_schema::flags::dont_validate,
          ::xml_schema::container* c = 0) const;

  Node&
  operator= (const Node& x);

  virtual 
  ~Node ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ID_optional ID_;
};

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

// Parse a URI or a local file.
//

::std::auto_ptr< ::NODESET >
NODESET_ (const ::std::string& uri,
          ::xml_schema::flags f = xml_schema::flags::dont_validate,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::NODESET >
NODESET_ (const ::std::string& uri,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = xml_schema::flags::dont_validate,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::NODESET >
NODESET_ (const ::std::string& uri,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = xml_schema::flags::dont_validate,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::NODESET >
NODESET_ (::std::istream& is,
          ::xml_schema::flags f = xml_schema::flags::dont_validate,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::NODESET >
NODESET_ (::std::istream& is,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = xml_schema::flags::dont_validate,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::NODESET >
NODESET_ (::std::istream& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = xml_schema::flags::dont_validate,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::NODESET >
NODESET_ (::std::istream& is,
          const ::std::string& id,
          ::xml_schema::flags f = xml_schema::flags::dont_validate,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::NODESET >
NODESET_ (::std::istream& is,
          const ::std::string& id,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = xml_schema::flags::dont_validate,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::NODESET >
NODESET_ (::std::istream& is,
          const ::std::string& id,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = xml_schema::flags::dont_validate,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::NODESET >
NODESET_ (::xercesc::InputSource& is,
          ::xml_schema::flags f = xml_schema::flags::dont_validate,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::NODESET >
NODESET_ (::xercesc::InputSource& is,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = xml_schema::flags::dont_validate,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::NODESET >
NODESET_ (::xercesc::InputSource& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = xml_schema::flags::dont_validate,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::NODESET >
NODESET_ (const ::xercesc::DOMDocument& d,
          ::xml_schema::flags f = xml_schema::flags::dont_validate,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::NODESET >
NODESET_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
          ::xml_schema::flags f = xml_schema::flags::dont_validate,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::REAL >
REAL_ (const ::std::string& uri,
       ::xml_schema::flags f = xml_schema::flags::dont_validate,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::REAL >
REAL_ (const ::std::string& uri,
       ::xml_schema::error_handler& eh,
       ::xml_schema::flags f = xml_schema::flags::dont_validate,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::REAL >
REAL_ (const ::std::string& uri,
       ::xercesc::DOMErrorHandler& eh,
       ::xml_schema::flags f = xml_schema::flags::dont_validate,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::REAL >
REAL_ (::std::istream& is,
       ::xml_schema::flags f = xml_schema::flags::dont_validate,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::REAL >
REAL_ (::std::istream& is,
       ::xml_schema::error_handler& eh,
       ::xml_schema::flags f = xml_schema::flags::dont_validate,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::REAL >
REAL_ (::std::istream& is,
       ::xercesc::DOMErrorHandler& eh,
       ::xml_schema::flags f = xml_schema::flags::dont_validate,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::REAL >
REAL_ (::std::istream& is,
       const ::std::string& id,
       ::xml_schema::flags f = xml_schema::flags::dont_validate,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::REAL >
REAL_ (::std::istream& is,
       const ::std::string& id,
       ::xml_schema::error_handler& eh,
       ::xml_schema::flags f = xml_schema::flags::dont_validate,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::REAL >
REAL_ (::std::istream& is,
       const ::std::string& id,
       ::xercesc::DOMErrorHandler& eh,
       ::xml_schema::flags f = xml_schema::flags::dont_validate,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::REAL >
REAL_ (::xercesc::InputSource& is,
       ::xml_schema::flags f = xml_schema::flags::dont_validate,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::REAL >
REAL_ (::xercesc::InputSource& is,
       ::xml_schema::error_handler& eh,
       ::xml_schema::flags f = xml_schema::flags::dont_validate,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::REAL >
REAL_ (::xercesc::InputSource& is,
       ::xercesc::DOMErrorHandler& eh,
       ::xml_schema::flags f = xml_schema::flags::dont_validate,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::REAL >
REAL_ (const ::xercesc::DOMDocument& d,
       ::xml_schema::flags f = xml_schema::flags::dont_validate,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::REAL >
REAL_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
       ::xml_schema::flags f = xml_schema::flags::dont_validate,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::IMAGINARY >
IMAGINARY_ (const ::std::string& uri,
            ::xml_schema::flags f = xml_schema::flags::dont_validate,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::IMAGINARY >
IMAGINARY_ (const ::std::string& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = xml_schema::flags::dont_validate,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::IMAGINARY >
IMAGINARY_ (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = xml_schema::flags::dont_validate,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::IMAGINARY >
IMAGINARY_ (::std::istream& is,
            ::xml_schema::flags f = xml_schema::flags::dont_validate,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::IMAGINARY >
IMAGINARY_ (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = xml_schema::flags::dont_validate,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::IMAGINARY >
IMAGINARY_ (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = xml_schema::flags::dont_validate,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::IMAGINARY >
IMAGINARY_ (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::flags f = xml_schema::flags::dont_validate,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::IMAGINARY >
IMAGINARY_ (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = xml_schema::flags::dont_validate,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::IMAGINARY >
IMAGINARY_ (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = xml_schema::flags::dont_validate,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::IMAGINARY >
IMAGINARY_ (::xercesc::InputSource& is,
            ::xml_schema::flags f = xml_schema::flags::dont_validate,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::IMAGINARY >
IMAGINARY_ (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = xml_schema::flags::dont_validate,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::IMAGINARY >
IMAGINARY_ (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = xml_schema::flags::dont_validate,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::IMAGINARY >
IMAGINARY_ (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = xml_schema::flags::dont_validate,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::IMAGINARY >
IMAGINARY_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
            ::xml_schema::flags f = xml_schema::flags::dont_validate,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::STACCATO_XML >
STACCATO_XML_ (const ::std::string& uri,
               ::xml_schema::flags f = xml_schema::flags::dont_validate,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::STACCATO_XML >
STACCATO_XML_ (const ::std::string& uri,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = xml_schema::flags::dont_validate,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::STACCATO_XML >
STACCATO_XML_ (const ::std::string& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = xml_schema::flags::dont_validate,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::STACCATO_XML >
STACCATO_XML_ (::std::istream& is,
               ::xml_schema::flags f = xml_schema::flags::dont_validate,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::STACCATO_XML >
STACCATO_XML_ (::std::istream& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = xml_schema::flags::dont_validate,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::STACCATO_XML >
STACCATO_XML_ (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = xml_schema::flags::dont_validate,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::STACCATO_XML >
STACCATO_XML_ (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::flags f = xml_schema::flags::dont_validate,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::STACCATO_XML >
STACCATO_XML_ (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = xml_schema::flags::dont_validate,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::STACCATO_XML >
STACCATO_XML_ (::std::istream& is,
               const ::std::string& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = xml_schema::flags::dont_validate,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::STACCATO_XML >
STACCATO_XML_ (::xercesc::InputSource& is,
               ::xml_schema::flags f = xml_schema::flags::dont_validate,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::STACCATO_XML >
STACCATO_XML_ (::xercesc::InputSource& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = xml_schema::flags::dont_validate,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::STACCATO_XML >
STACCATO_XML_ (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = xml_schema::flags::dont_validate,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::STACCATO_XML >
STACCATO_XML_ (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f = xml_schema::flags::dont_validate,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::STACCATO_XML >
STACCATO_XML_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
               ::xml_schema::flags f = xml_schema::flags::dont_validate,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // IP_STACCATO_XML_HXX
